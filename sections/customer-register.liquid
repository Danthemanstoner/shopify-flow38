<!-- /sections/customer-register.liquid -->

<div class="wrapper-padded">
  <div class="grid page-main--wrapper">

    <div class="grid__item large--one-third push--large--one-third text-center">

      <div class="sitewide--title-wrapper">
        <h1 class="page--title">{{ 'customer.register.title' | t }}</h1>
      </div>

      <div class="form-vertical">
        {% form 'create_customer' %}

          {{ form.errors | default_errors }}

          <label for="FirstName" class="hidden-label">{{ 'customer.register.first_name' | t }}</label>
          <input type="text" name="customer[first_name]" id="FirstName" class="input-full" placeholder="{{ 'customer.register.first_name' | t }}" {% if form.first_name %}value="{{ form.first_name }}"{% endif %} autocapitalize="words" autofocus>

          <label for="LastName" class="hidden-label">{{ 'customer.register.last_name' | t }}</label>
          <input type="text" name="customer[last_name]" id="LastName" class="input-full" placeholder="{{ 'customer.register.last_name' | t }}" {% if form.last_name %}value="{{ form.last_name }}"{% endif %} autocapitalize="words">

          <label for="Email" class="hidden-label">{{ 'customer.register.email' | t }}</label>
          <input type="email" name="customer[email]" id="Email" class="input-full{% if form.errors contains 'email' %} error{% endif %}" placeholder="{{ 'customer.register.email' | t }}" {% if form.email %} value="{{ form.email }}"{% endif %} autocorrect="off" autocapitalize="off">

          <label for="CreatePassword" class="hidden-label">{{ 'customer.register.password' | t }}</label>
          <input type="password" name="customer[password]" id="CreatePassword" class="input-full{% if form.errors contains 'password' %} error{% endif %}" placeholder="{{ 'customer.register.password' | t }}">

          <p>
            <button type="submit" class="btn btn--full account-section--btn">{{ 'customer.register.submit' | t }}</button>
          </p>
          <span class="register-cancel--wrapper nav-link-animated--custom"><a class="animated-link--item" href="{{ shop.url }}">{{ 'customer.register.cancel' | t }}</a></span>

        {% endform %}
      </div>

    </div>

  </div>
</div>

<!-- Popup Form for Newsletter Subscription -->
<div id="newsletterPopup" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); display:flex; align-items:center; justify-content:center;">
  <div style="background:#fff; padding:20px; border-radius:5px; width:300px; text-align:center;">
    <h2>Subscribe to our Newsletter</h2>
    <form id="newsletterForm" method="post" action="/contact">
      <input type="hidden" name="form_type" value="customer">
      <input type="hidden" name="utf8" value="âœ“">
      <input type="email" id="newsletterEmail" name="contact[email]" placeholder="Enter your email">
      <input type="hidden" name="contact[tags]" value="newsletter">
      <button type="submit">Subscribe</button>
    </form>
  </div>
</div>

{% schema %}
{
  "name": "t:sections.customer-register.name",
  "settings": [

  ]
}
{% endschema %}

<script>
document.addEventListener('DOMContentLoaded', function () {
  const createCustomerForm = document.querySelector('form[action="/account"]');
  const newsletterPopup = document.getElementById('newsletterPopup');
  const newsletterForm = document.getElementById('newsletterForm');
  const newsletterEmail = document.getElementById('newsletterEmail');

  createCustomerForm.addEventListener('submit', function (event) {
    event.preventDefault(); // Prevent the default form submission

    const formData = new FormData(createCustomerForm);

    fetch('/account', {
      method: 'POST',
      body: formData,
    }).then(response => {
      if (response.ok) {
        // Show the newsletter popup
        const email = document.getElementById('Email').value;
        newsletterEmail.value = email;
        newsletterPopup.style.display = 'flex';
      } else {
        response.json().then(data => {
          alert('Account creation failed: ' + (data.errors ? data.errors.join(', ') : 'Unknown error'));
        });
      }
    }).catch(error => {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    });
  });

  newsletterForm.addEventListener('submit', function (e) {
    e.preventDefault();
    const newsletterFormData = new FormData(newsletterForm);
    fetch(newsletterForm.action, {
      method: 'POST',
      body: new URLSearchParams(newsletterFormData),
    }).then(response => {
      if (response.ok) {
        // Close the popup and redirect
        newsletterPopup.style.display = 'none';
        window.location.href = '/account';
      } else {
        alert('Subscription failed. Please try again.');
      }
    }).catch(error => {
      console.error('Newsletter subscription failed:', error);
      alert('An error occurred. Please try again.');
    });
  });
});
</script>
