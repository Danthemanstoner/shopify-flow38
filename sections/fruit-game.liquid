<div class="fruit-game-container">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="gameInfo">
    <div id="score">SCORE: 0</div>
    <div id="level">LEVEL 1</div>
    <div id="lives">LIVES: 3</div>
  </div>
  <div id="gameOver" style="display: none;">
    <h2>GAME OVER</h2>
    <p>YOUR SCORE: <span id="finalScore"></span></p>
    <form id="leaderboardForm">
      <input type="text" id="playerName" placeholder="Enter your name" required>
      <button type="submit">Submit Score</button>
    </form>
  </div>
  <div id="leaderboard" style="display: none;">
    <h2>HIGH SCORES</h2>
    <ol id="leaderboardList"></ol>
  </div>
  <div id="reward" style="display: none;">
    <h3>New High Score!</h3>
    <p>You've earned a discount:</p>
    <p class="discount-code" id="discountCodeText">25PercentOFF</p>
    <button id="copyDiscountCode">Copy Code</button>
    <button id="applyDiscountCode">Apply to Cart</button>
    <p>Use this code for 25% off your next purchase!</p>
  </div>
  <div id="productRecommendation" style="display: none;">
    <h3>We think you might like this:</h3>
    <div id="productDetails"></div>
  </div>
  <audio id="collectSound" src="{{ 'collect.mp3' | asset_url }}" preload="auto"></audio>
  <audio id="shootSound" src="{{ 'shoot.mp3' | asset_url }}" preload="auto"></audio>
  <audio id="explosionSound" src="{{ 'explosion.mp3' | asset_url }}" preload="auto"></audio>
</div>

<div id="gameInstructions" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; font-size: 24px; color: #18533A;">
  Click to fire poop!
</div>

<script>
  console.log('Game script starting');

  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');
  const scoreElement = document.getElementById('score');
  const levelElement = document.getElementById('level');
  const livesElement = document.getElementById('lives');
  const gameOverElement = document.getElementById('gameOver');
  const finalScoreElement = document.getElementById('finalScore');
  const leaderboardElement = document.getElementById('leaderboard');
  const leaderboardListElement = document.getElementById('leaderboardList');
  const rewardElement = document.getElementById('reward');
  const discountCodeElement = document.getElementById('discountCodeText');
  const productRecommendationElement = document.getElementById('productRecommendation');
  const productDetailsElement = document.getElementById('productDetails');
  const gameInstructions = document.getElementById('gameInstructions');

  let score = 0;
  let level = 1;
  let lives = 3;
  let items = [];
  let bunnyX = 400;
  let bunnyY = 550;
  let gameActive = false;
  let cursorSize = 40;
  let backgroundColor = '#FFFFFF';
  const borderColor = '#494949';
  let poos = [];
  let spareLives = [];

  let startTime;
  let poopsFired = 0;
  let fruitCollected = {
    'üçé': 0, 'üçå': 0, 'üçá': 0, 'üçä': 0, 'üçì': 0
  };
  let extraLivesCollected = 0;

  const itemTypes = ['üçé', 'üçå', 'üçá', 'üçä', 'üçì'];

  const collectSound = document.getElementById('collectSound');
  const shootSound = document.getElementById('shootSound');
  const explosionSound = document.getElementById('explosionSound');

  let isBossLevel = false;

  function drawArcadeBunny(x, y, size) {
    ctx.fillStyle = '#A0A0A0'; // Grey color for the bunny
    ctx.beginPath();
    ctx.ellipse(x, y, size/2, size/1.5, 0, 0, Math.PI * 2);
    ctx.fill();

    // Ears
    ctx.beginPath();
    ctx.ellipse(x - size/3, y - size/2, size/6, size/3, -Math.PI/6, 0, Math.PI * 2);
    ctx.fill();
    ctx.beginPath();
    ctx.ellipse(x + size/3, y - size/2, size/6, size/3, Math.PI/6, 0, Math.PI * 2);
    ctx.fill();

    // Eyes
    ctx.fillStyle = '#000000';
    ctx.beginPath();
    ctx.arc(x - size/6, y - size/10, size/10, 0, Math.PI * 2);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(x + size/6, y - size/10, size/10, 0, Math.PI * 2);
    ctx.fill();

    // Nose
    ctx.fillStyle = '#FF9999';
    ctx.beginPath();
    ctx.ellipse(x, y + size/10, size/10, size/15, 0, 0, Math.PI * 2);
    ctx.fill();
  }

  function drawArcadeFruit(x, y, size, type) {
    switch(type) {
      case 'üçé':
        // Apple
        ctx.fillStyle = '#FF0000';
        ctx.beginPath();
        ctx.arc(x, y, size/2, 0, Math.PI * 2);
        ctx.fill();
        ctx.fillStyle = '#00AA00';
        ctx.fillRect(x - size/20, y - size/2, size/10, size/4);
        break;
      case 'üçå':
        // Banana
        ctx.fillStyle = '#FFE135';
        ctx.beginPath();
        ctx.moveTo(x - size/2, y);
        ctx.quadraticCurveTo(x, y - size/2, x + size/2, y);
        ctx.quadraticCurveTo(x, y + size/2, x - size/2, y);
        ctx.fill();
        break;
      case 'üçá':
        // Grapes
        ctx.fillStyle = '#6B2C91';
        for(let i = 0; i < 3; i++) {
          for(let j = 0; j < 3; j++) {
            ctx.beginPath();
            ctx.arc(x + (i-1)*size/4, y + (j-1)*size/4, size/6, 0, Math.PI * 2);
            ctx.fill();
          }
        }
        break;
      case 'üçä':
        // Orange
        ctx.fillStyle = '#FFA500';
        ctx.beginPath();
        ctx.arc(x, y, size/2, 0, Math.PI * 2);
        ctx.fill();
        ctx.strokeStyle = '#FF8C00';
        ctx.lineWidth = size/20;
        ctx.beginPath();
        ctx.arc(x, y, size/2.5, 0, Math.PI * 2);
        ctx.stroke();
        break;
      case 'üçì':
        // Strawberry
        ctx.fillStyle = '#FF0000';
        ctx.beginPath();
        ctx.moveTo(x, y - size/2);
        ctx.bezierCurveTo(x + size/2, y - size/2, x + size/2, y + size/2, x, y + size/2);
        ctx.bezierCurveTo(x - size/2, y + size/2, x - size/2, y - size/2, x, y - size/2);
        ctx.fill();
        ctx.fillStyle = '#00AA00';
        ctx.beginPath();
        ctx.moveTo(x - size/4, y - size/2);
        ctx.lineTo(x, y - size/3);
        ctx.lineTo(x + size/4, y - size/2);
        ctx.fill();
        break;
    }
  }

  function createParticles(x, y, color, count = 20, speed = 5) {
    const particles = [];
    for (let i = 0; i < count; i++) {
      particles.push({
        x: x,
        y: y,
        size: Math.random() * 5 + 2,
        speedX: (Math.random() - 0.5) * speed,
        speedY: (Math.random() - 0.5) * speed,
        color: color
      });
    }
    return particles;
  }

  function createItem() {
    return {
      x: Math.random() * (canvas.width - 80) + 40,
      y: -80,
      type: itemTypes[(level - 1) % itemTypes.length],
      speed: 1 + Math.random() * 2 + (level - 1) * 0.5
    };
  }

  function drawPoo(x, y) {
    ctx.fillStyle = '#8B4513';
    ctx.beginPath();
    ctx.arc(x, y, 15, 0, 2 * Math.PI); // Increased size for better visibility
    ctx.fill();
  }

  function getFruitColor(type) {
    switch(type) {
      case 'üçé': return '#FF0000';
      case 'üçå': return '#FFD700';
      case 'üçá': return '#800080';
      case 'üçä': return '#FFA500';
      case 'üçì': return '#FF69B4';
      default: return '#000000';
    }
  }

  function updateGame() {
    if (!gameActive) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw background
    ctx.fillStyle = backgroundColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Draw border
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = 10;
    ctx.strokeRect(5, 5, canvas.width - 10, canvas.height - 10);

    // Draw bunny
    drawArcadeBunny(bunnyX, bunnyY, cursorSize);

    // Update and draw poos
    for (let i = poos.length - 1; i >= 0; i--) {
      const poo = poos[i];
      poo.y -= 8;
      drawPoo(poo.x, poo.y);

      if (poo.y < 0) {
        poos.splice(i, 1);
      }
    }

    // Update and draw items
    for (let i = items.length - 1; i >= 0; i--) {
      const item = items[i];
      item.y += item.speed;

      if (item.type === 'spareLife') {
        drawArcadeBunny(item.x, item.y, 30);
      } else {
        drawArcadeFruit(item.x, item.y, 40, item.type);
      }

      // Check collision with bunny
      if (Math.abs(item.x - bunnyX) < 40 && Math.abs(item.y - bunnyY) < 40) {
        if (item.type === 'spareLife') {
          lives++;
          extraLivesCollected++;
          updateLives();
        } else if (item.type === 'ü•ï') {
          score += 10;
          isBossLevel = false;
        } else {
          score++;
          fruitCollected[item.type]++;
        }
        scoreElement.textContent = `SCORE: ${score}`;
        item.particles = createParticles(item.x, item.y, getFruitColor(item.type), 40, 8);
        collectSound.play();
        items.splice(i, 1);
        if (score % 10 === 0) {
          level++;
          levelElement.textContent = `LEVEL ${level}`;
          cursorSize += 5; // Slower growth
          backgroundColor = backgroundColor === '#FFFFFF' ? '#18533A' : '#FFFFFF';
        }
        continue;
      }

      // Check collision with poos
      for (let j = poos.length - 1; j >= 0; j--) {
        const poo = poos[j];
        if (Math.abs(item.x - poo.x) < 30 && Math.abs(item.y - poo.y) < 30) {
          if (item.type !== 'spareLife') {
            score++;
            fruitCollected[item.type]++;
            scoreElement.textContent = `SCORE: ${score}`;
            item.particles = createParticles(item.x, item.y, getFruitColor(item.type), 60, 10);
          }
          explosionSound.play();
          items.splice(i, 1);
          poos.splice(j, 1);
          if (score % 10 === 0) {
            level++;
            levelElement.textContent = `LEVEL ${level}`;
            cursorSize += 5; // Slower growth
            backgroundColor = backgroundColor === '#FFFFFF' ? '#18533A' : '#FFFFFF';
          }
          break;
        }
      }

      // Draw particles
      if (item.particles) {
        item.particles.forEach((particle, index) => {
          particle.x += particle.speedX;
          particle.y += particle.speedY;
          particle.size *= 0.95;

          ctx.fillStyle = particle.color;
          ctx.fillRect(particle.x, particle.y, particle.size, particle.size);

          if (particle.size <= 0.5) {
            item.particles.splice(index, 1);
          }
        });
      }

      // Remove items that fall off screen
      if (item.y > canvas.height) {
        items.splice(i, 1);
        if (item.type !== 'spareLife') {
          lives--;
          updateLives();
          if (lives <= 0) {
            gameOver();
            return;
          }
        }
      }
    }

    // Add new items
    if (Math.random() < 0.01 + (level * 0.002)) {
      if (level % 20 === 0 && !isBossLevel) {
        isBossLevel = true;
        for (let i = 0; i < 10; i++) {
          items.push({
            x: Math.random() * (canvas.width - 80) + 40,
            y: -80 - i * 100,
            type: 'ü•ï',
            speed: 2 + Math.random() * 3
          });
        }
      } else if (level % 10 === 0 && Math.random() < 0.1) {
        items.push({
          x: Math.random() * (canvas.width - 80) + 40,
          y: -80,
          type: 'spareLife',
          speed: 1 + Math.random() * 2
        });
      } else if (!isBossLevel) {
        items.push(createItem());
      }
    }

    requestAnimationFrame(updateGame);
  }

  function updateLives() {
    livesElement.textContent = `LIVES: ${lives}`;
  }

  function gameOver() {
    gameActive = false;
    const endTime = new Date();
    const timeTaken = (endTime - startTime) / 1000; // in seconds

    gameOverElement.style.display = 'block';
    finalScoreElement.textContent = score;

    const statsElement = document.createElement('div');
    statsElement.innerHTML = `
      <h3>Game Statistics:</h3>
      <p>Time taken: ${timeTaken.toFixed(2)} seconds</p>
      <p>Poops fired: ${poopsFired}</p>
      <p>Fruits collected:</p>
      <ul>
        ${Object.entries(fruitCollected).map(([fruit, count]) => `<li>${fruit}: ${count}</li>`).join('')}
      </ul>
      <p>Extra lives collected: ${extraLivesCollected}</p>
    `;
    gameOverElement.appendChild(statsElement);

    const highScore = localStorage.getItem('fruitGameHighScore') || 0;
    if (score > highScore) {
      localStorage.setItem('fruitGameHighScore', score);
      showReward();
    }

    showRandomProduct();
  }

  function showReward() {
    const discountCode = '25PercentOFF';
    const rewardElement = document.createElement('div');
    rewardElement.innerHTML = `
      <h3>New High Score!</h3>
      <p>You've earned a discount:</p>
      <p class="discount-code" id="discountCodeText">${discountCode}</p>
      <button id="copyDiscountCode">Copy Code</button>
      <button id="applyDiscountCode">Apply to Cart</button>
      <p>Use this code for 25% off your next purchase!</p>
    `;
    rewardElement.className = 'reward-popup';
    document.body.appendChild(rewardElement);

    document.getElementById('copyDiscountCode').addEventListener('click', () => {
      navigator.clipboard.writeText(discountCode).then(() => {
        alert('Discount code copied to clipboard!');
      });
    });

    document.getElementById('applyDiscountCode').addEventListener('click', () => {
      applyDiscountToCart(discountCode);
    });

    setTimeout(() => {
      document.body.removeChild(rewardElement);
    }, 10000);
  }

  function applyDiscountToCart(discountCode) {
    // This function will depend on your Shopify setup
    // Here's a basic example using the Shopify AJAX API
    fetch('/discount/' + discountCode, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('Discount applied to your cart!');
      } else {
        alert('Failed to apply discount. Please try again.');
      }
    })
    .catch((error) => {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    });
  }

  async function showRandomProduct() {
    try {
      const response = await fetch('/products.json');
      const data = await response.json();
      const randomProduct = data.products[Math.floor(Math.random() * data.products.length)];
      
      productDetailsElement.innerHTML = `
        <div class="product-card" data-product-id="${randomProduct.id}">
          <a href="/products/${randomProduct.handle}">
            <img src="${randomProduct.images[0].src}" alt="${randomProduct.title}" style="max-width: 200px;">
            <h4>${randomProduct.title}</h4>
          </a>
          <p class="product-price">${formatMoney(randomProduct.variants[0].price)}</p>
          <div class="product-actions">
            <button class="add-to-wishlist" data-product-id="${randomProduct.id}">Add to Wishlist</button>
            <button class="quick-buy" data-product-id="${randomProduct.id}">Quick Buy</button>
          </div>
        </div>
      `;
      productRecommendationElement.style.display = 'block';

      // Add event listeners for wishlist and quick buy buttons
      setupProductActions(randomProduct);
    } catch (error) {
      console.error('Error fetching random product:', error);
    }
  }

  function setupProductActions(product) {
    const wishlistButton = document.querySelector(`.add-to-wishlist[data-product-id="${product.id}"]`);
    const quickBuyButton = document.querySelector(`.quick-buy[data-product-id="${product.id}"]`);

    wishlistButton.addEventListener('click', () => addToWishlist(product));
    quickBuyButton.addEventListener('click', () => quickBuy(product));
  }

  function addToWishlist(product) {
    // Implement your wishlist functionality here
    console.log(`Added ${product.title} to wishlist`);
    // You might want to send an AJAX request to your server to update the user's wishlist
  }

  function quickBuy(product) {
    // Implement your quick buy functionality here
    console.log(`Quick buy ${product.title}`);
    // You might want to open a quick view modal or directly add the item to the cart
  }

  function formatMoney(cents) {
    return '$' + (cents / 100).toFixed(2);
  }

  function resizeCanvas() {
    const container = canvas.parentElement;
    const containerWidth = container.clientWidth;
    const scale = Math.min(1, containerWidth / 800);
    canvas.style.width = `${800 * scale}px`;
    canvas.style.height = `${600 * scale}px`;
  }

  canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    bunnyX = (e.clientX - rect.left) * (canvas.width / rect.width);
  });

  canvas.addEventListener('click', (e) => {
    if (!gameActive) {
      startGame();
      gameInstructions.style.display = 'none';
    } else {
      const poopsToFire = Math.floor(level / 5) + 1;
      for (let i = 0; i < poopsToFire; i++) {
        poos.push({ 
          x: bunnyX + (i - (poopsToFire-1)/2) * 20, 
          y: bunnyY 
        });
      }
      poopsFired += poopsToFire;
      shootSound.play();
    }
  });

  canvas.addEventListener('touchmove', (e) => {
    e.preventDefault();
    const rect = canvas.getBoundingClientRect();
    const touch = e.touches[0];
    bunnyX = (touch.clientX - rect.left) * (canvas.width / rect.width);
  }, { passive: false });

  canvas.addEventListener('touchend', (e) => {
    const poopsToFire = Math.floor(level / 5) + 1;
    for (let i = 0; i < poopsToFire; i++) {
      poos.push({ 
        x: bunnyX + (i - (poopsToFire-1)/2) * 20, 
        y: bunnyY 
      });
    }
    poopsFired += poopsToFire;
    shootSound.play();
  });

  document.getElementById('leaderboardForm').addEventListener('submit', (e) => {
    e.preventDefault();
    const playerName = document.getElementById('playerName').value;
    submitScore(playerName, score);
    showLeaderboard();
  });

  function submitScore(name, score) {
    const leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
    leaderboard.push({ name, score });
    leaderboard.sort((a, b) => b.score - a.score);
    localStorage.setItem('fruitGameLeaderboard', JSON.stringify(leaderboard.slice(0, 10)));
    
    // Update the game over element
    const gameOverElement = document.getElementById('gameOver');
    const leaderboardForm = document.getElementById('leaderboardForm');
    const congratsMessage = document.createElement('p');
    congratsMessage.textContent = 'Congratulations, you made the list!';
    
    // Replace the form with the congrats message
    leaderboardForm.replaceWith(congratsMessage);
    
    // Show the updated leaderboard
    showLeaderboard();
  }

  function showLeaderboard() {
    const leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
    leaderboardListElement.innerHTML = leaderboard.map(entry => 
      `<li>${entry.name}: ${entry.score}</li>`
    ).join('');
    leaderboardElement.style.display = 'block';
  }

  function submitHighScore(score, playerName) {
    fetch('/api/highscores', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ score, playerName }),
    })
    .then(response => response.json())
    .then(data => console.log('High score submitted:', data))
    .catch((error) => console.error('Error:', error));
  }

  // Call this function when the game ends
  submitHighScore(score, playerName);

  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();

  console.log('Starting game loop');
  startTime = new Date();
  updateGame();

  // Show instructions at the start
  gameInstructions.style.display = 'block';

  function startGame() {
    gameActive = true;
    score = 0;
    level = 1;
    lives = 3;
    items = [];
    startTime = new Date();
    updateGame();
  }
</script>

<style>
  .fruit-game-container * {
    font-family: Arial, sans-serif !important;
    box-sizing: border-box;
  }

  .fruit-game-container {
    text-align: center;
    max-width: 800px;
    width: 100%;
    margin: 0 auto;
    background-color: #FFFFFF !important;
    padding: 20px;
    border: 4px solid #494949 !important;
    border-radius: 10px;
    overflow: hidden;
  }

  .fruit-game-container #gameCanvas {
    border: 4px solid #494949 !important;
    margin: 20px auto;
    display: block;
    max-width: 100%;
    height: auto;
  }

  .fruit-game-container #gameInfo {
    display: flex;
    justify-content: space-between;
    font-size: 16px;
    margin: 10px 0;
    color: #18533A !important;
  }

  .fruit-game-container #gameOver,
  .fruit-game-container #leaderboard,
  .fruit-game-container #reward,
  .fruit-game-container #productRecommendation {
    margin-top: 20px;
    background-color: #F0F0F0 !important;
    color: #18533A !important;
    padding: 10px;
    border-radius: 5px;
  }

  .fruit-game-container #leaderboardForm input,
  .fruit-game-container #leaderboardForm button {
    margin: 10px 0;
    padding: 5px;
    font-size: 16px;
  }

  .fruit-game-container #leaderboardList {
    list-style-position: inside;
    padding: 0;
    text-align: left;
  }

  .fruit-game-container #reward {
    font-size: 18px;
    background-color: #E0FFE0 !important;
  }

  .fruit-game-container .btn {
    display: inline-block;
    padding: 10px 20px;
    background-color: #18533A;
    color: #FFFFFF;
    text-decoration: none;
    border-radius: 5px;
    margin-top: 10px;
  }

  .reward-popup {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #FFFFFF;
    color: #18533A;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.5);
    z-index: 1000;
    font-family: Arial, sans-serif;
    text-align: center;
  }

  .reward-popup .discount-code {
    font-size: 24px;
    font-weight: bold;
    color: #FF0000;
  }

  @media (max-width: 820px) {
    .fruit-game-container {
      padding: 10px;
    }

    .fruit-game-container #gameInfo {
      font-size: 14px;
    }
  }

  .product-card {
    border: 1px solid #e8e8e8;
    padding: 15px;
    text-align: center;
    margin-bottom: 20px;
  }

  .product-card img {
    max-width: 100%;
    height: auto;
  }

  .product-price {
    font-weight: bold;
    margin: 10px 0;
  }

  .product-actions {
    display: flex;
    justify-content: space-around;
    margin-top: 10px;
  }

  .product-actions button {
    background-color: #18533A;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .product-actions button:hover {
    background-color: #123c2a;
  }
</style>

{% schema %}
{
  "name": "Fruit Shooting Game",
  "settings": [],
  "presets": [
    {
      "name": "Fruit Shooting Game",
      "category": "Interactive"
    }
  ]
}
{% endschema %}
