<div class="fruit-game-container">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="gameInfo">
    <div id="score">SCORE: 0</div>
    <div id="level">LEVEL 1</div>
    <div id="lives">LIVES: 3</div>
  </div>
  <div id="gameOver" style="display: none;">
    <h2>GAME OVER</h2>
    <p>YOUR SCORE: <span id="finalScore"></span></p>
    <div id="gameStats"></div>
    <form id="leaderboardForm">
      <input type="text" id="playerName" placeholder="Enter your name" required>
      <button type="submit">Submit Score</button>
    </form>
  </div>
  <div id="leaderboard" style="display: none;">
    <h2>HIGH SCORES</h2>
    <ol id="leaderboardList"></ol>
  </div>
  <div id="reward" style="display: none;">
    <h3>Congratulations!</h3>
    <p>You've earned a 25% discount on your next purchase.</p>
    <p>Your discount code: <span class="discount-code" id="discountCodeText"></span></p>
    <button onclick="FruitGame.applyDiscountToCart()">Apply to Cart</button>
    <p>Use this code for 25% off your next purchase!</p>
  </div>
  <div id="productRecommendation" style="display: none;">
    <h3>We think you might like this:</h3>
    <div id="productDetails"></div>
  </div>
</div>

<div id="gameInstructions" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; font-size: 24px; color: #18533A;">
  Click to fire poop!
</div>

<script>
  console.log('Game script starting');

  window.FruitGame = {
      init: function() {
          console.log('Game init started');

          this.canvas = document.getElementById('gameCanvas');
          this.ctx = this.canvas.getContext('2d');
          this.scoreElement = document.getElementById('score');
          this.levelElement = document.getElementById('level');
          this.livesElement = document.getElementById('lives');
          this.gameOverElement = document.getElementById('gameOver');
          this.finalScoreElement = document.getElementById('finalScore');
          this.leaderboardElement = document.getElementById('leaderboard');
          this.leaderboardListElement = document.getElementById('leaderboardList');
          this.rewardElement = document.getElementById('reward');
          this.discountCodeElement = document.getElementById('discountCodeText');
          this.productRecommendationElement = document.getElementById('productRecommendation');
          this.productDetailsElement = document.getElementById('productDetails');
          this.gameInstructions = document.getElementById('gameInstructions');
          this.leaderboardForm = document.getElementById('leaderboardForm');
          this.gameStatsElement = document.getElementById('gameStats');

          console.log('DOM elements initialized');

          this.score = 0;
          this.level = 1;
          this.lives = 3;
          this.items = [];
          this.bunnyX = 400;
          this.bunnyY = 550;
          this.gameActive = false;
          this.cursorSize = 40;
          this.backgroundColor = '#FFFFFF';
          this.borderColor = '#494949';
          this.poos = [];
          this.spareLives = [];

          this.startTime = null;
          this.poopsFired = 0;
          this.fruitCollected = { 'üçé': 0, 'üçå': 0, 'üçá': 0, 'üçä': 0, 'üçì': 0 };
          this.extraLivesCollected = 0;

          this.itemTypes = ['üçé', 'üçå', 'üçá', 'üçä', 'üçì'];

          this.isBossLevel = false;

          console.log('Game variables initialized');

          this.canvas.addEventListener('click', function(event) {
              console.log('Canvas clicked');
              if (!FruitGame.gameActive) {
                  FruitGame.startGame();
              } else {
                  FruitGame.shootPoo();
              }
          });

          this.canvas.addEventListener('mousemove', function(event) {
              if (FruitGame.gameActive) {
                  FruitGame.bunnyX = event.clientX - FruitGame.canvas.getBoundingClientRect().left;
              }
          });

          this.leaderboardForm.addEventListener('submit', function(event) {
              event.preventDefault();
              FruitGame.submitHighScore();
          });

          this.drawArcadeBunny(this.bunnyX, this.bunnyY, this.cursorSize);

          console.log('Game initialized');
      },

      drawArcadeBunny: function(x, y, size) {
          this.ctx.fillStyle = '#A0A0A0';
          this.ctx.beginPath();
          this.ctx.ellipse(x, y, size/2, size/1.5, 0, 0, Math.PI * 2);
          this.ctx.fill();

          this.ctx.beginPath();
          this.ctx.ellipse(x - size/3, y - size/2, size/6, size/3, -Math.PI/6, 0, Math.PI * 2);
          this.ctx.fill();
          this.ctx.beginPath();
          this.ctx.ellipse(x + size/3, y - size/2, size/6, size/3, Math.PI/6, 0, Math.PI * 2);
          this.ctx.fill();

          this.ctx.fillStyle = '#000000';
          this.ctx.beginPath();
          this.ctx.arc(x - size/6, y - size/10, size/10, 0, Math.PI * 2);
          this.ctx.fill();
          this.ctx.beginPath();
          this.ctx.arc(x + size/6, y - size/10, size/10, 0, Math.PI * 2);
          this.ctx.fill();

          this.ctx.fillStyle = '#FF9999';
          this.ctx.beginPath();
          this.ctx.ellipse(x, y + size/10, size/10, size/15, 0, 0, Math.PI * 2);
          this.ctx.fill();
      },

      drawArcadeFruit: function(x, y, size, type) {
          switch(type) {
              case 'üçé':
                  this.ctx.fillStyle = '#FF0000';
                  this.ctx.beginPath();
                  this.ctx.arc(x, y, size/2, 0, Math.PI * 2);
                  this.ctx.fill();
                  this.ctx.fillStyle = '#00AA00';
                  this.ctx.fillRect(x - size/20, y - size/2, size/10, size/4);
                  break;
              case 'üçå':
                  this.ctx.fillStyle = '#FFE135';
                  this.ctx.beginPath();
                  this.ctx.moveTo(x - size/2, y);
                  this.ctx.quadraticCurveTo(x, y - size/2, x + size/2, y);
                  this.ctx.quadraticCurveTo(x, y + size/2, x - size/2, y);
                  this.ctx.fill();
                  break;
              case 'üçá':
                  this.ctx.fillStyle = '#6B2C91';
                  for(let i = 0; i < 3; i++) {
                      for(let j = 0; j < 3; j++) {
                          this.ctx.beginPath();
                          this.ctx.arc(x + (i-1)*size/4, y + (j-1)*size/4, size/6, 0, Math.PI * 2);
                          this.ctx.fill();
                      }
                  }
                  break;
              case 'üçä':
                  this.ctx.fillStyle = '#FFA500';
                  this.ctx.beginPath();
                  this.ctx.arc(x, y, size/2, 0, Math.PI * 2);
                  this.ctx.fill();
                  this.ctx.strokeStyle = '#FF8C00';
                  this.ctx.lineWidth = size/20;
                  this.ctx.beginPath();
                  this.ctx.arc(x, y, size/2.5, 0, Math.PI * 2);
                  this.ctx.stroke();
                  break;
              case 'üçì':
                  this.ctx.fillStyle = '#FF0000';
                  this.ctx.beginPath();
                  this.ctx.moveTo(x, y - size/2);
                  this.ctx.bezierCurveTo(x + size/2, y - size/2, x + size/2, y + size/2, x, y + size/2);
                  this.ctx.bezierCurveTo(x - size/2, y + size/2, x - size/2, y - size/2, x, y - size/2);
                  this.ctx.fill();
                  this.ctx.fillStyle = '#00AA00';
                  this.ctx.beginPath();
                  this.ctx.moveTo(x - size/4, y - size/2);
                  this.ctx.lineTo(x, y - size/3);
                  this.ctx.lineTo(x + size/4, y - size/2);
                  this.ctx.fill();
                  break;
          }
      },

      createParticles: function(x, y, color, count = 20, speed = 5) {
          const particles = [];
          for (let i = 0; i < count; i++) {
              particles.push({
                  x: x,
                  y: y,
                  size: Math.random() * 5 + 2,
                  speedX: (Math.random() - 0.5) * speed,
                  speedY: (Math.random() - 0.5) * speed,
                  color: color
              });
          }
          return particles;
      },

      createItem: function() {
          return {
              x: Math.random() * (this.canvas.width - 80) + 40,
              y: -80,
              type: this.itemTypes[(this.level - 1) % this.itemTypes.length],
              speed: 1 + Math.random() * 2 + (this.level - 1) * 0.5
          };
      },

      drawPoo: function(x, y) {
          this.ctx.fillStyle = '#8B4513';
          this.ctx.beginPath();
          this.ctx.arc(x, y, 15, 0, Math.PI * 2);
          this.ctx.fill();
      },

      getFruitColor: function(type) {
          switch(type) {
              case 'üçé': return '#FF0000';
              case 'üçå': return '#FFD700';
              case 'üçá': return '#800080';
              case 'üçä': return '#FFA500';
              case 'üçì': return '#FF69B4';
              default: return '#000000';
          }
      },

      updateGame: function() {
          if (!this.gameActive) return;

          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

          this.ctx.fillStyle = this.backgroundColor;
          this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
          
          this.ctx.strokeStyle = this.borderColor;
          this.ctx.lineWidth = 10;
          this.ctx.strokeRect(5, 5, this.canvas.width - 10, this.canvas.height - 10);

          this.drawArcadeBunny(this.bunnyX, this.bunnyY, this.cursorSize);

          for (let i = this.poos.length - 1; i >= 0; i--) {
              const poo = this.poos[i];
              poo.y -= 8;
              this.drawPoo(poo.x, poo.y);

              if (poo.y < 0) {
                  this.poos.splice(i, 1);
              }
          }

          for (let i = this.items.length - 1; i >= 0; i--) {
              const item = this.items[i];
              item.y += item.speed;

              if (item.type === 'spareLife') {
                  this.drawArcadeBunny(item.x, item.y, 30);
              } else {
                  this.drawArcadeFruit(item.x, item.y, 40, item.type);
              }

              if (Math.abs(item.x - this.bunnyX) < 40 && Math.abs(item.y - this.bunnyY) < 40) {
                  if (item.type === 'spareLife') {
                      this.lives++;
                      this.extraLivesCollected++;
                      this.updateLives();
                  } else if (item.type === 'ü•ï') {
                      this.score += 10;
                      this.isBossLevel = false;
                  } else {
                      this.score++;
                      this.fruitCollected[item.type]++;
                  }
                  this.scoreElement.textContent = `SCORE: ${this.score}`;
                  item.particles = this.createParticles(item.x, item.y, this.getFruitColor(item.type), 40, 8);
                  this.items.splice(i, 1);
                  if (this.score % 10 === 0) {
                      this.level++;
                      this.levelElement.textContent = `LEVEL ${this.level}`;
                      this.cursorSize += 5;
                      this.backgroundColor = this.backgroundColor === '#FFFFFF' ? '#18533A' : '#FFFFFF';
                  }
                  continue;
              }

              for (let j = this.poos.length - 1; j >= 0; j--) {
                  const poo = this.poos[j];
                  if (Math.abs(item.x - poo.x) < 30 && Math.abs(item.y - poo.y) < 30) {
                      if (item.type !== 'spareLife') {
                          this.score++;
                          this.fruitCollected[item.type]++;
                          this.scoreElement.textContent = `SCORE: ${this.score}`;
                          item.particles = this.createParticles(item.x, item.y, this.getFruitColor(item.type), 60, 10);
                      }
                      this.items.splice(i, 1);
                      this.poos.splice(j, 1);
                      if (this.score % 10 === 0) {
                          this.level++;
                          this.levelElement.textContent = `LEVEL ${this.level}`;
                          this.cursorSize += 5;
                          this.backgroundColor = this.backgroundColor === '#FFFFFF' ? '#18533A' : '#FFFFFF';
                      }
                      break;
                  }
              }

              if (item.particles) {
                  item.particles.forEach((particle, index) => {
                      particle.x += particle.speedX;
                      particle.y += particle.speedY;
                      particle.size *= 0.95;

                      this.ctx.fillStyle = particle.color;
                      this.ctx.fillRect(particle.x, particle.y, particle.size, particle.size);

                      if (particle.size <= 0.5) {
                          item.particles.splice(index, 1);
                      }
                  });
              }

              if (item.y > this.canvas.height) {
                  this.items.splice(i, 1);
                  if (item.type !== 'spareLife') {
                      this.lives--;
                      this.updateLives();
                      if (this.lives <= 0) {
                          this.gameOver();
                          return;
                      }
                  }
              }
          }

          if (Math.random() < 0.01 + (this.level * 0.002)) {
              if (this.level % 20 === 0 && !this.isBossLevel) {
                  this.isBossLevel = true;
                  for (let i = 0; i < 10; i++) {
                      this.items.push({
                          x: Math.random() * (this.canvas.width - 80) + 40,
                          y: -80 - i * 100,
                          type: 'ü•ï',
                          speed: 2 + Math.random() * 3
                      });
                  }
              } else if (this.level % 10 === 0 && Math.random() < 0.1) {
                  this.items.push({
                      x: Math.random() * (this.canvas.width - 80) + 40,
                      y: -80,
                      type: 'spareLife',
                      speed: 1 + Math.random() * 2
                  });
              } else if (!this.isBossLevel) {
                  this.items.push(this.createItem());
              }
          }

          requestAnimationFrame(() => this.updateGame());
      },

      updateLives: function() {
          this.livesElement.textContent = `LIVES: ${this.lives}`;
      },

      gameOver: function() {
          this.gameActive = false;
          const endTime = new Date();
          const timeTaken = (endTime - this.startTime) / 1000;

          this.gameOverElement.style.display = 'block';
          this.finalScoreElement.textContent = this.score;

          // Display game statistics
          const statsHtml = `
              <p>Time: ${timeTaken.toFixed(2)} seconds</p>
              <p>Poops Fired: ${this.poopsFired}</p>
              <p>Fruit Collected:</p>
              <ul>
                  ${Object.entries(this.fruitCollected).map(([fruit, count]) => `<li>${fruit}: ${count}</li>`).join('')}
              </ul>
              <p>Extra Lives Collected: ${this.extraLivesCollected}</p>
          `;
          this.gameStatsElement.innerHTML = statsHtml;

          const highScore = localStorage.getItem('fruitGameHighScore') || 0;
          if (this.score > highScore) {
              localStorage.setItem('fruitGameHighScore', this.score);
              this.showReward();
          }

          this.showRandomProduct();
          this.updateLeaderboard(this.score);
      },

      submitHighScore: function() {
          const playerName = document.getElementById('playerName').value;
          console.log(`Submitting score: ${this.score} for player: ${playerName}`);

          this.updateLeaderboard(this.score, playerName);

          // Display message after submitting score
          alert("Thanks for playing! Your score has been submitted.");
          
          // Hide the game over screen and show the leaderboard
          this.gameOverElement.style.display = 'none';
          this.leaderboardElement.style.display = 'block';
      },

      updateLeaderboard: function(score, playerName = 'Anonymous') {
          let leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
          leaderboard.push({name: playerName, score: score});
          leaderboard.sort((a, b) => b.score - a.score);
          leaderboard = leaderboard.slice(0, 10); // Keep only top 10
          localStorage.setItem('fruitGameLeaderboard', JSON.stringify(leaderboard));

          this.leaderboardListElement.innerHTML = leaderboard.map((entry, index) => 
              `<li>${index + 1}. ${entry.name}: ${entry.score}</li>`
          ).join('');

          this.leaderboardElement.style.display = 'block';
      },

      showReward: function() {
          this.rewardElement.style.display = 'block';
          const discountCode = 'FRUIT25OFF'; // This should be generated or retrieved from your backend
          this.discountCodeElement.textContent = discountCode;
          
          // Add text to explain the voucher
          const voucherExplanation = document.createElement('p');
          voucherExplanation.textContent = "Congratulations! You've earned a 25% discount on your next purchase.";
          this.rewardElement.insertBefore(voucherExplanation, this.discountCodeElement);
      },

      showRandomProduct: function() {
          console.log('Showing random product');
          
          // Fetch random product from the shop
          fetch('/products.json')
              .then(response => response.json())
              .then(data => {
                  const products = data.products;
                  const randomProduct = products[Math.floor(Math.random() * products.length)];
                  
                  this.productDetailsElement.innerHTML = `
                      <div class="product-recommendation">
                          <img src="${randomProduct.images[0].src}" alt="${randomProduct.title}" style="width:200px;height:200px;object-fit:cover;">
                          <div class="product-info">
                              <h4>${randomProduct.title}</h4>
                              <p>Price: $${randomProduct.variants[0].price}</p>
                          </div>
                          <button class="add-to-cart-button" onclick="FruitGame.addToCart(${randomProduct.variants[0].id})">Add to Cart</button>
                      </div>
                  `;
                  this.productRecommendationElement.style.display = 'block';
              })
              .catch(error => {
                  console.error('Error fetching random product:', error);
                  this.productRecommendationElement.style.display = 'none';
              });
      },

      addToCart: function(variantId) {
          console.log(`Adding product with variant ID ${variantId} to cart`);
          
          fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                  items: [{
                      id: variantId,
                      quantity: 1
                  }]
              })
          })
          .then(response => response.json())
          .then(data => {
              console.log('Product added to cart:', data);
              alert('Product added to cart!');
          })
          .catch((error) => {
              console.error('Error:', error);
              alert('Error adding product to cart');
          });
      },

      startGame: function() {
          console.log('Starting game loop');
          this.gameActive = true;
          this.score = 0;
          this.level = 1;
          this.lives = 3;
          this.items = [];
          this.poos = [];
          this.cursorSize = 40;
          this.backgroundColor = '#FFFFFF';
          this.startTime = new Date();
          this.poopsFired = 0;
          this.fruitCollected = { 'üçé': 0, 'üçå': 0, 'üçá': 0, 'üçä': 0, 'üçì': 0 };
          this.extraLivesCollected = 0;
          
          this.scoreElement.textContent = `SCORE: ${this.score}`;
          this.levelElement.textContent = `LEVEL ${this.level}`;
          this.updateLives();
          
          this.gameOverElement.style.display = 'none';
          this.leaderboardElement.style.display = 'none';
          this.rewardElement.style.display = 'none';
          this.productRecommendationElement.style.display = 'none';
          this.gameInstructions.style.display = 'none';
          
          this.updateGame();
      },

      shootPoo: function() {
          this.poos.push({ x: this.bunnyX, y: this.bunnyY });
          this.poopsFired++;
      }
  };

  window.onload = function() {
      console.log('Window loaded, initializing game');
      FruitGame.init();
  };

  console.log('Game script loaded');
</script>

<style>
  .fruit-game-container * {
      font-family: Arial, sans-serif !important;
      box-sizing: border-box;
  }

  .fruit-game-container {
      text-align: center;
      max-width: 800px;
      width: 100%;
      margin: 0 auto;
      background-color: #FFFFFF !important;
      padding: 20px;
      border: 4px solid #494949 !important;
      border-radius: 10px;
      overflow: hidden;
  }

  .fruit-game-container #gameCanvas {
      border: 4px solid #494949 !important;
      margin: 20px auto;
      display: block;
      max-width: 100%;
      height: auto;
  }

  .fruit-game-container #gameInfo {
      display: flex;
      justify-content: space-between;
      font-size: 16px;
      margin: 10px 0;
      color: #18533A !important;
  }

  .fruit-game-container #gameOver,
  .fruit-game-container #leaderboard,
  .fruit-game-container #reward,
  .fruit-game-container #productRecommendation {
      margin-top: 20px;
      background-color: #F0F0F0 !important;
      color: #18533A !important;
      padding: 10px;
      border-radius: 5px;
  }

  .fruit-game-container #leaderboardForm input,
  .fruit-game-container #leaderboardForm button {
      margin: 10px 0;
      padding: 5px;
      font-size: 16px;
  }

  .fruit-game-container #leaderboardList {
      list-style-position: inside;
      padding: 0;
      text-align: left;
  }

  .fruit-game-container #reward {
      font-size: 18px;
      background-color: #E0FFE0 !important;
  }

  .fruit-game-container .btn {
      display: inline-block;
      padding: 10px 20px;
      background-color: #18533A;
      color: #FFFFFF;
      text-decoration: none;
      border-radius: 5px;
      margin-top: 10px;
  }

  .reward-popup {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #FFFFFF;
      color: #18533A;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.5);
      z-index: 1000;
      font-family: Arial, sans-serif;
      text-align: center;
  }

  .reward-popup .discount-code {
      font-size: 24px;
      font-weight: bold;
      color: #FF0000;
  }

  @media (max-width: 820px) {
      .fruit-game-container {
          padding: 10px;
      }

      .fruit-game-container #gameInfo {
          font-size: 14px;
      }
  }

  .product-recommendation {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 20px;
      text-align: center;
  }

  .product-recommendation img {
      margin-bottom: 15px;
  }

  .product-info {
      margin-bottom: 15px;
  }

  .add-to-cart-button {
      background-color: #4CAF50;
      border: none;
      color: white;
      padding: 15px 32px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      margin: 4px 2px;
      cursor: pointer;
      transition-duration: 0.4s;
  }

  .add-to-cart-button:hover {
      background-color: #45a049;
  }
</style>

{% schema %}
{
  "name": "Fruit Shooting Game",
  "settings": [],
  "presets": [
    {
      "name": "Fruit Shooting Game",
      "category": "Interactive"
    }
  ]
}
{% endschema %}


