<div class="fruit-game-container">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="gameInfo">
    <div id="score">SCORE: 0</div>
    <div id="level">LEVEL 1</div>
    <div id="lives">LIVES: 3</div>
  </div>
  <div id="gameOver" style="display: none;">
    <h2>GAME OVER</h2>
    <p>YOUR SCORE: <span id="finalScore"></span></p>
    <form id="leaderboardForm">
      <input type="text" id="playerName" placeholder="Enter your name" required>
      <button type="submit">Submit Score</button>
    </form>
  </div>
  <div id="leaderboard" style="display: none;">
    <h2>HIGH SCORES</h2>
    <ol id="leaderboardList"></ol>
  </div>
  <div id="reward" style="display: none;">
    YOU GOT A POWER-UP! 10% OFF CODE: <span id="discountCode"></span>
    <p>Enter this code at checkout to receive your discount!</p>
  </div>
  <div id="productRecommendation" style="display: none;">
    <h3>We think you might like this:</h3>
    <div id="productDetails"></div>
  </div>
</div>

<script>
  console.log('Game script starting');

  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');
  const scoreElement = document.getElementById('score');
  const levelElement = document.getElementById('level');
  const livesElement = document.getElementById('lives');
  const gameOverElement = document.getElementById('gameOver');
  const finalScoreElement = document.getElementById('finalScore');
  const leaderboardElement = document.getElementById('leaderboard');
  const leaderboardListElement = document.getElementById('leaderboardList');
  const rewardElement = document.getElementById('reward');
  const discountCodeElement = document.getElementById('discountCode');
  const productRecommendationElement = document.getElementById('productRecommendation');
  const productDetailsElement = document.getElementById('productDetails');

  let score = 0;
  let level = 1;
  let lives = 3;
  let items = [];
  let bunnyX = 400;
  let bunnyY = 550;
  let gameActive = true;
  let cursorSize = 40;
  let backgroundColor = '#FFFFFF';
  const borderColor = '#494949';
  let poos = [];
  let spareLives = [];

  let startTime;
  let poopsFired = 0;
  let fruitCollected = {
    'üçé': 0, 'üçå': 0, 'üçá': 0, 'üçä': 0, 'üçì': 0
  };
  let extraLivesCollected = 0;

  const itemTypes = ['üçé', 'üçå', 'üçá', 'üçä', 'üçì'];

  const fruitEmojis = ['üçé', 'üçå', 'üçá', 'üçä', 'üçì'];
  const collectSound = new Audio('https://example.com/collect.mp3');
  const shootSound = new Audio('https://example.com/shoot.mp3');
  const explosionSound = new Audio('https://example.com/explosion.mp3');

  function createItem() {
    return {
      x: Math.random() * (canvas.width - 80) + 40,
      y: -80,
      type: itemTypes[(level - 1) % itemTypes.length],
      speed: 1 + Math.random() * 2 + (level - 1) * 0.5
    };
  }

  function drawBunny(x, y, size, isSpareLife = false) {
    ctx.fillStyle = '#808080'; // Grey color
    ctx.fillRect(x - size/2, y - size, size, size * 1.5); // Body
    
    // Ears
    ctx.fillRect(x - size/2, y - size * 1.5, size/4, size/2); // Left ear
    ctx.fillRect(x + size/4, y - size * 1.5, size/4, size/2); // Right ear
    
    // Eyes
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(x - size/3, y - size * 0.8, size/4, size/4); // Left eye
    ctx.fillRect(x + size/12, y - size * 0.8, size/4, size/4); // Right eye
    
    ctx.fillStyle = '#000000';
    ctx.fillRect(x - size/4, y - size * 0.7, size/8, size/8); // Left pupil
    ctx.fillRect(x + size/6, y - size * 0.7, size/8, size/8); // Right pupil
    
    // Nose
    ctx.fillStyle = '#FFC0CB';
    ctx.fillRect(x - size/8, y - size * 0.5, size/4, size/8);
    
    if (isSpareLife) {
      ctx.strokeStyle = '#00FF00';
      ctx.lineWidth = 2;
      ctx.strokeRect(x - size/2 - 2, y - size - 2, size + 4, size * 1.5 + 4);
    }
  }

  function drawPoo(x, y) {
    ctx.fillStyle = '#8B4513';
    ctx.beginPath();
    ctx.arc(x, y, 15, 0, 2 * Math.PI); // Increased size for better visibility
    ctx.fill();
  }

  function drawPixelatedFruit(x, y, size, type) {
    ctx.font = `${size}px Arial`;
    ctx.imageSmoothingEnabled = false;
    
    // Draw to a temporary canvas and scale up for pixelation effect
    const tempCanvas = document.createElement('canvas');
    const tempCtx = tempCanvas.getContext('2d');
    tempCanvas.width = size / 4;
    tempCanvas.height = size / 4;
    tempCtx.font = `${size / 4}px Arial`;
    tempCtx.fillText(type, 0, size / 4);
    
    ctx.drawImage(tempCanvas, x, y, size, size);
    ctx.imageSmoothingEnabled = true;
  }

  function createParticles(x, y, color) {
    const particleCount = 20;
    const particles = [];

    for (let i = 0; i < particleCount; i++) {
      particles.push({
        x: x,
        y: y,
        size: Math.random() * 3 + 1,
        speedX: (Math.random() - 0.5) * 5,
        speedY: (Math.random() - 0.5) * 5,
        color: color
      });
    }

    return particles;
  }

  function getFruitColor(type) {
    switch(type) {
      case 'üçé': return '#FF0000';
      case 'üçå': return '#FFD700';
      case 'üçá': return '#800080';
      case 'üçä': return '#FFA500';
      case 'üçì': return '#FF69B4';
      default: return '#000000';
    }
  }

  function updateGame() {
    if (!gameActive) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw background
    ctx.fillStyle = backgroundColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Draw border
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = 10;
    ctx.strokeRect(5, 5, canvas.width - 10, canvas.height - 10);

    // Draw bunny
    drawBunny(bunnyX, bunnyY, cursorSize);

    // Update and draw poos
    for (let i = poos.length - 1; i >= 0; i--) {
      const poo = poos[i];
      poo.y -= 8;
      drawPoo(poo.x, poo.y);

      if (poo.y < 0) {
        poos.splice(i, 1);
      }
    }

    // Update and draw items and spare lives
    for (let i = items.length - 1; i >= 0; i--) {
      const item = items[i];
      item.y += item.speed;

      if (item.type === 'spareLife') {
        drawBunny(item.x, item.y, 30, true);
      } else {
        drawPixelatedFruit(item.x, item.y, 40, item.type);
      }

      // Check collision with bunny
      if (Math.abs(item.x - bunnyX) < 40 && Math.abs(item.y - bunnyY) < 40) {
        if (item.type === 'spareLife') {
          lives++;
          extraLivesCollected++;
          updateLives();
        } else {
          score++;
          fruitCollected[item.type]++;
          scoreElement.textContent = `SCORE: ${score}`;
          item.particles = createParticles(item.x, item.y, getFruitColor(item.type));
        }
        collectSound.play();
        items.splice(i, 1);
        if (score % 10 === 0) {
          level++;
          levelElement.textContent = `LEVEL ${level}`;
          cursorSize += 5; // Slower growth
          backgroundColor = backgroundColor === '#FFFFFF' ? '#18533A' : '#FFFFFF';
        }
        continue;
      }

      // Check collision with poos
      for (let j = poos.length - 1; j >= 0; j--) {
        const poo = poos[j];
        if (Math.abs(item.x - poo.x) < 30 && Math.abs(item.y - poo.y) < 30) {
          if (item.type !== 'spareLife') {
            score++;
            fruitCollected[item.type]++;
            scoreElement.textContent = `SCORE: ${score}`;
            item.particles = createParticles(item.x, item.y, getFruitColor(item.type));
          }
          explosionSound.play();
          items.splice(i, 1);
          poos.splice(j, 1);
          if (score % 10 === 0) {
            level++;
            levelElement.textContent = `LEVEL ${level}`;
            cursorSize += 5; // Slower growth
            backgroundColor = backgroundColor === '#FFFFFF' ? '#18533A' : '#FFFFFF';
          }
          break;
        }
      }

      // Draw particles
      if (item.particles) {
        item.particles.forEach((particle, index) => {
          particle.x += particle.speedX;
          particle.y += particle.speedY;
          particle.size *= 0.95;

          ctx.fillStyle = particle.color;
          ctx.fillRect(particle.x, particle.y, particle.size, particle.size);

          if (particle.size <= 0.5) {
            item.particles.splice(index, 1);
          }
        });
      }

      // Remove items that fall off screen
      if (item.y > canvas.height) {
        items.splice(i, 1);
        if (item.type !== 'spareLife') {
          lives--;
          updateLives();
          if (lives <= 0) {
            gameOver();
            return;
          }
        }
      }
    }

    // Add new items
    if (Math.random() < 0.01 + (level * 0.002)) { // Reduced frequency
      if (level % 10 === 0 && Math.random() < 0.1) {
        items.push({
          x: Math.random() * (canvas.width - 80) + 40,
          y: -80,
          type: 'spareLife',
          speed: 1 + Math.random() * 2
        });
      } else {
        items.push(createItem());
      }
    }

    requestAnimationFrame(updateGame);
  }

  function updateLives() {
    livesElement.textContent = `LIVES: ${lives}`;
  }

  function gameOver() {
    gameActive = false;
    const endTime = new Date();
    const timeTaken = (endTime - startTime) / 1000; // in seconds

    gameOverElement.style.display = 'block';
    finalScoreElement.textContent = score;

    const statsElement = document.createElement('div');
    statsElement.innerHTML = `
      <h3>Game Statistics:</h3>
      <p>Time taken: ${timeTaken.toFixed(2)} seconds</p>
      <p>Poops fired: ${poopsFired}</p>
      <p>Fruits collected:</p>
      <ul>
        ${Object.entries(fruitCollected).map(([fruit, count]) => `<li>${fruit}: ${count}</li>`).join('')}
      </ul>
      <p>Extra lives collected: ${extraLivesCollected}</p>
    `;
    gameOverElement.appendChild(statsElement);

    showReward();
    showRandomProduct();
  }

  function showReward() {
    const discountCode = generateDiscountCode();
    discountCodeElement.textContent = discountCode;
    rewardElement.style.display = 'block';
  }

  function generateDiscountCode() {
    return 'FRUIT' + Math.random().toString(36).substr(2, 5).toUpperCase();
  }

  async function showRandomProduct() {
    try {
      const response = await fetch('/products.json');
      const data = await response.json();
      const randomProduct = data.products[Math.floor(Math.random() * data.products.length)];
      
      productDetailsElement.innerHTML = `
        <img src="${randomProduct.images[0].src}" alt="${randomProduct.title}" style="max-width: 200px;">
        <h4>${randomProduct.title}</h4>
        <p>${randomProduct.price}</p>
        <a href="/products/${randomProduct.handle}" class="btn">View Product</a>
      `;
      productRecommendationElement.style.display = 'block';
    } catch (error) {
      console.error('Error fetching random product:', error);
    }
  }

  function resizeCanvas() {
    const container = canvas.parentElement;
    const containerWidth = container.clientWidth;
    const scale = Math.min(1, containerWidth / 800);
    canvas.style.width = `${800 * scale}px`;
    canvas.style.height = `${600 * scale}px`;
  }

  canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    bunnyX = (e.clientX - rect.left) * (canvas.width / rect.width);
  });

  canvas.addEventListener('click', (e) => {
    poos.push({ x: bunnyX, y: bunnyY });
    poopsFired++;
    shootSound.play();
  });

  canvas.addEventListener('touchmove', (e) => {
    e.preventDefault();
    const rect = canvas.getBoundingClientRect();
    const touch = e.touches[0];
    bunnyX = (touch.clientX - rect.left) * (canvas.width / rect.width);
  }, { passive: false });

  canvas.addEventListener('touchend', (e) => {
    poos.push({ x: bunnyX, y: bunnyY });
    poopsFired++;
    shootSound.play();
  });

  document.getElementById('leaderboardForm').addEventListener('submit', (e) => {
    e.preventDefault();
    const playerName = document.getElementById('playerName').value;
    submitScore(playerName, score);
    showLeaderboard();
  });

  function submitScore(name, score) {
    const leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
    leaderboard.push({ name, score });
    leaderboard.sort((a, b) => b.score - a.score);
    localStorage.setItem('fruitGameLeaderboard', JSON.stringify(leaderboard.slice(0, 10)));
  }

  function showLeaderboard() {
    const leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
    leaderboardListElement.innerHTML = leaderboard.map(entry => 
      `<li>${entry.name}: ${entry.score}</li>`
    ).join('');
    leaderboardElement.style.display = 'block';
  }

  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();

  console.log('Starting game loop');
  startTime = new Date();
  updateGame();
</script>

<style>
  .fruit-game-container * {
    font-family: Arial, sans-serif !important;
    box-sizing: border-box;
  }

  .fruit-game-container {
    text-align: center;
    max-width: 800px;
    width: 100%;
    margin: 0 auto;
    background-color: #FFFFFF !important;
    padding: 20px;
    border: 4px solid #494949 !important;
    border-radius: 10px;
    overflow: hidden;
  }

  .fruit-game-container #gameCanvas {
    border: 4px solid #494949 !important;
    margin: 20px auto;
    display: block;
    max-width: 100%;
    height: auto;
  }

  .fruit-game-container #gameInfo {
    display: flex;
    justify-content: space-between;
    font-size: 16px;
    margin: 10px 0;
    color: #18533A !important;
  }

  .fruit-game-container #gameOver,
  .fruit-game-container #leaderboard,
  .fruit-game-container #reward,
  .fruit-game-container #productRecommendation {
    margin-top: 20px;
    background-color: #F0F0F0 !important;
    color: #18533A !important;
    padding: 10px;
    border-radius: 5px;
  }

  .fruit-game-container #leaderboardForm input,
  .fruit-game-container #leaderboardForm button {
    margin: 10px 0;
    padding: 5px;
    font-size: 16px;
  }

  .fruit-game-container #leaderboardList {
    list-style-position: inside;
    padding: 0;
    text-align: left;
  }

  .fruit-game-container #reward {
    font-size: 18px;
    background-color: #E0FFE0 !important;
  }

  .fruit-game-container .btn {
    display: inline-block;
    padding: 10px 20px;
    background-color: #18533A;
    color: #FFFFFF;
    text-decoration: none;
    border-radius: 5px;
    margin-top: 10px;
  }

  @media (max-width: 820px) {
    .fruit-game-container {
      padding: 10px;
    }

    .fruit-game-container #gameInfo {
      font-size: 14px;
    }
  }
</style>

{% schema %}
{
  "name": "Fruit Shooting Game",
  "settings": [],
  "presets": [
    {
      "name": "Fruit Shooting Game",
      "category": "Interactive"
    }
  ]
}
{% endschema %}
