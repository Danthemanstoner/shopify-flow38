<div class="fruit-game-container">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="gameInfo">
    <div id="score">SCORE: 0</div>
    <div id="level">LEVEL 1</div>
    <div id="lives">LIVES: 3</div>
  </div>
  <div id="gameOver" style="display: none;">
    <h2>GAME OVER</h2>
    <p>YOUR SCORE: <span id="finalScore"></span></p>
    <form id="leaderboardForm">
      <input type="text" id="playerName" placeholder="Enter your name" required>
      <button type="submit">Submit Score</button>
    </form>
  </div>
  <div id="leaderboard" style="display: none;">
    <h2>HIGH SCORES</h2>
    <ol id="leaderboardList"></ol>
  </div>
  <div id="reward" style="display: none;">
    YOU GOT A POWER-UP! 10% OFF CODE: <span id="discountCode"></span>
  </div>
  <div id="productRecommendation" style="display: none;">
    <h3>We think you might like this:</h3>
    <div id="productDetails"></div>
  </div>
</div>

<script>
  console.log('Game script starting');

  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');
  const scoreElement = document.getElementById('score');
  const levelElement = document.getElementById('level');
  const livesElement = document.getElementById('lives');
  const gameOverElement = document.getElementById('gameOver');
  const finalScoreElement = document.getElementById('finalScore');
  const leaderboardElement = document.getElementById('leaderboard');
  const leaderboardListElement = document.getElementById('leaderboardList');
  const rewardElement = document.getElementById('reward');
  const discountCodeElement = document.getElementById('discountCode');
  const productRecommendationElement = document.getElementById('productRecommendation');
  const productDetailsElement = document.getElementById('productDetails');

  let score = 0;
  let level = 1;
  let lives = 3;
  let items = [];
  let playerX = 400;
  let playerY = 500;
  let gameActive = true;
  let primaryColor = '#18533A';
  let secondaryColor = '#494949';

  const itemTypes = ['🍎', '🍌', '🍇', '🍊', '🍓'];

  function createItem() {
    return {
      x: Math.random() * canvas.width,
      y: 0,
      type: itemTypes[Math.floor(Math.random() * itemTypes.length)],
      speed: 2 + Math.random() * 3 + (level - 1)
    };
  }

  function draw8BitFruit(x, y, size, type) {
    ctx.fillStyle = primaryColor;
    ctx.fillRect(x, y, size, size);
    ctx.fillStyle = secondaryColor;
    ctx.font = `${size * 0.8}px Arial`;
    ctx.fillText(type, x + size * 0.1, y + size * 0.8);
  }

  function updateGame() {
    if (!gameActive) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw background
    ctx.fillStyle = secondaryColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw player
    ctx.fillStyle = primaryColor;
    ctx.beginPath();
    ctx.arc(playerX, playerY - 20, 20, 0, Math.PI * 2);
    ctx.fill();

    // Update and draw items
    for (let i = items.length - 1; i >= 0; i--) {
      const item = items[i];
      item.y += item.speed;

      draw8BitFruit(item.x, item.y, 40, item.type);

      // Check collision with player
      if (Math.abs(item.x - playerX) < 30 && Math.abs(item.y - playerY) < 30) {
        score++;
        scoreElement.textContent = `SCORE: ${score}`;
        items.splice(i, 1);
        if (score % 10 === 0) {
          level++;
          levelElement.textContent = `LEVEL ${level}`;
          [primaryColor, secondaryColor] = [secondaryColor, primaryColor];
        }
      }

      // Remove items that fall off screen
      if (item.y > canvas.height) {
        items.splice(i, 1);
        lives--;
        updateLives();
        if (lives <= 0) {
          gameOver();
          return;
        }
      }
    }

    // Add new items
    if (Math.random() < 0.02 + (level * 0.005)) {
      items.push(createItem());
    }

    requestAnimationFrame(updateGame);
  }

  function updateLives() {
    livesElement.textContent = `LIVES: ${lives}`;
  }

  function gameOver() {
    gameActive = false;
    gameOverElement.style.display = 'block';
    finalScoreElement.textContent = score;
    showReward();
    showRandomProduct();
  }

  function showReward() {
    const discountCode = generateDiscountCode();
    discountCodeElement.textContent = discountCode;
    rewardElement.style.display = 'block';
  }

  function generateDiscountCode() {
    return 'FRUIT' + Math.random().toString(36).substr(2, 5).toUpperCase();
  }

  async function showRandomProduct() {
    try {
      const response = await fetch('/products.json');
      const data = await response.json();
      const randomProduct = data.products[Math.floor(Math.random() * data.products.length)];
      
      productDetailsElement.innerHTML = `
        <img src="${randomProduct.images[0].src}" alt="${randomProduct.title}" style="max-width: 200px;">
        <h4>${randomProduct.title}</h4>
        <p>${randomProduct.price}</p>
        <a href="/products/${randomProduct.handle}" class="btn">View Product</a>
      `;
      productRecommendationElement.style.display = 'block';
    } catch (error) {
      console.error('Error fetching random product:', error);
    }
  }

  canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    playerX = e.clientX - rect.left;
  });

  document.getElementById('leaderboardForm').addEventListener('submit', (e) => {
    e.preventDefault();
    const playerName = document.getElementById('playerName').value;
    submitScore(playerName, score);
    showLeaderboard();
  });

  function submitScore(name, score) {
    const leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
    leaderboard.push({ name, score });
    leaderboard.sort((a, b) => b.score - a.score);
    localStorage.setItem('fruitGameLeaderboard', JSON.stringify(leaderboard.slice(0, 10)));
  }

  function showLeaderboard() {
    const leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
    leaderboardListElement.innerHTML = leaderboard.map(entry => 
      `<li>${entry.name}: ${entry.score}</li>`
    ).join('');
    leaderboardElement.style.display = 'block';
  }

  console.log('Starting game loop');
  updateGame();
</script>

<style>
  .fruit-game-container * {
    font-family: Arial, sans-serif !important;
  }

  .fruit-game-container {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
    background-color: #FFFFFF !important;
    padding: 20px;
    border: 4px solid #18533A !important;
    border-radius: 10px;
  }
  .fruit-game-container #gameCanvas {
    border: 4px solid #18533A !important;
    margin: 20px auto;
    display: block;
  }
  .fruit-game-container #gameInfo {
    display: flex;
    justify-content: space-between;
    font-size: 16px;
    margin: 10px 0;
    color: #18533A !important;
  }
  .fruit-game-container #gameOver,
  .fruit-game-container #leaderboard,
  .fruit-game-container #reward,
  .fruit-game-container #productRecommendation {
    margin-top: 20px;
    background-color: #F0F0F0 !important;
    color: #18533A !important;
    padding: 10px;
    border-radius: 5px;
  }
  .fruit-game-container #leaderboardForm input,
  .fruit-game-container #leaderboardForm button {
    margin: 10px 0;
    padding: 5px;
    font-size: 16px;
  }
  .fruit-game-container #leaderboardList {
    list-style-position: inside;
    padding: 0;
    text-align: left;
  }
  .fruit-game-container #reward {
    font-size: 18px;
    background-color: #E0FFE0 !important;
  }
  .fruit-game-container .btn {
    display: inline-block;
    padding: 10px 20px;
    background-color: #18533A;
    color: #FFFFFF;
    text-decoration: none;
    border-radius: 5px;
    margin-top: 10px;
  }
</style>

{% schema %}
{
  "name": "Fruit Catching Game",
  "settings": [],
  "presets": [
    {
      "name": "Fruit Catching Game",
      "category": "Interactive"
    }
  ]
}
{% endschema %}