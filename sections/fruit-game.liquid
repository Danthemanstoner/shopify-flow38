<div class="fruit-game-container">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="gameInfo">
    <div id="score">SCORE: 0</div>
    <div id="level">LEVEL 1</div>
    <div id="lives">LIVES: 3</div>
  </div>
  <div id="gameOver" style="display: none;">
    <h2>GAME OVER</h2>
    <p>YOUR SCORE: <span id="finalScore"></span></p>
    <div id="gameStats"></div>
    <form id="leaderboardForm">
      <input type="text" id="playerName" placeholder="Enter your name" required>
      <button type="submit">Submit Score</button>
    </form>
  </div>
  <div id="leaderboard" style="display: none;">
    <h2>HIGH SCORES</h2>
    <ol id="leaderboardList"></ol>
  </div>
  <div id="reward" style="display: none;">
    <h3>Congratulations!</h3>
    <p>You've earned a 25% discount on your next purchase.</p>
    <p>Your discount code: <span class="discount-code" id="discountCodeText"></span></p>
    <button onclick="FruitGame.applyDiscountToCart()">Apply to Cart</button>
    <p>Use this code for 25% off your next purchase!</p>
  </div>
  <div id="productRecommendation" style="display: none;">
    <h3>We think you might like this:</h3>
    <div id="productDetails"></div>
  </div>
  <div class="fruit-game-voucher" style="display: none;">
    <p>Your voucher for free shipping!</p>
  </div>
</div>

<div id="gameInstructions" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; font-size: 24px; color: #18533A;">
  Click to fire poop!
</div>

<script>
  console.log('Game script starting');

  window.FruitGame = {
      init: function() {
          console.log('Game init started');

          this.canvas = document.getElementById('gameCanvas');
          this.ctx = this.canvas.getContext('2d');
          this.scoreElement = document.getElementById('score');
          this.levelElement = document.getElementById('level');
          this.livesElement = document.getElementById('lives');
          this.gameOverElement = document.getElementById('gameOver');
          this.finalScoreElement = document.getElementById('finalScore');
          this.leaderboardElement = document.getElementById('leaderboard');
          this.leaderboardListElement = document.getElementById('leaderboardList');
          this.rewardElement = document.getElementById('reward');
          this.discountCodeElement = document.getElementById('discountCodeText');
          this.productRecommendationElement = document.getElementById('productRecommendation');
          this.productDetailsElement = document.getElementById('productDetails');
          this.gameInstructions = document.getElementById('gameInstructions');
          this.leaderboardForm = document.getElementById('leaderboardForm');
          this.gameStatsElement = document.getElementById('gameStats');
          this.voucherElement = document.querySelector('.fruit-game-voucher');

          console.log('DOM elements initialized');

          this.score = 0;
          this.level = 1;
          this.lives = 3;
          this.items = [];
          this.bunnyX = 400;
          this.bunnyY = 550;
          this.gameActive = false;
          this.cursorSize = 40;
          this.backgroundColor = '#FFFFFF';
          this.borderColor = '#494949';
          this.poos = [];
          this.spareLives = [];

          this.startTime = null;
          this.poopsFired = 0;
          this.fruitCollected = {
              'tomato': 0, 'pineapple': 0, 'watermelon': 0, 'durian': 0, 'raspberry': 0, 
              'orange': 0, 'apple': 0, 'pear': 0, 'banana': 0, 'carrot': 0, 'grapes': 0, 'strawberry': 0
          };
          this.extraLivesCollected = 0;

          this.fruitImages = {};
          this.fruitTypes = ['tomato', 'pineapple', 'watermelon', 'durian', 'raspberry', 'orange', 'apple', 'pear', 'banana', 'carrot', 'grapes', 'strawberry'];

          this.isBossLevel = false;

          console.log('Game variables initialized');

          // Update the bunny's position to ensure it stays within the canvas
          this.canvas.addEventListener('mousemove', function(event) {
              if (FruitGame.gameActive) {
                  const rect = FruitGame.canvas.getBoundingClientRect();
                  FruitGame.bunny.x = Math.min(Math.max(event.clientX - rect.left - FruitGame.bunny.width / 2, 0), FruitGame.canvas.width - FruitGame.bunny.width);
              }
          });

          // Add touch event for mobile
          this.canvas.addEventListener('touchmove', function(event) {
              if (FruitGame.gameActive) {
                  const rect = FruitGame.canvas.getBoundingClientRect();
                  const touch = event.touches[0]; // Get the first touch point
                  FruitGame.bunny.x = Math.min(Math.max(touch.clientX - rect.left - FruitGame.bunny.width / 2, 0), FruitGame.canvas.width - FruitGame.bunny.width);
              }
          });

          this.canvas.addEventListener('click', function(event) {
              console.log('Canvas clicked');
              if (!FruitGame.gameActive) {
                  FruitGame.startGame();
              } else {
                  FruitGame.shootPoo();
              }
          });

          this.leaderboardForm.addEventListener('submit', function(event) {
              event.preventDefault();
              FruitGame.submitHighScore();
          });

          // Preload and resize bunny images
          this.bunnyImages = [
              'https://cdn.shopify.com/s/files/1/0860/2877/9835/files/PTR_Chubby_Pink_Bunny-4.png?v=1725113126',
              'https://cdn.shopify.com/s/files/1/0860/2877/9835/files/PTR_Chubby_Pink_Bunny-1.png?v=1725113126',
              'https://cdn.shopify.com/s/files/1/0860/2877/9835/files/PTR_Chubby_Pink_Bunny-3.png?v=1725113126',
              'https://cdn.shopify.com/s/files/1/0860/2877/9835/files/PTR_Chubby_Pink_Bunny-2.png?v=1725113125'
          ].map(src => {
              const img = new Image();
              img.src = src;
              img.onload = () => {
                  const canvas = document.createElement('canvas');
                  const ctx = canvas.getContext('2d');
                  const scale = 0.2; // Adjust this value to change the size
                  canvas.width = img.width * scale;
                  canvas.height = img.height * scale;
                  ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                  img.src = canvas.toDataURL();
              };
              return img;
          });

          this.bunny = new this.Bunny(this.canvas.width / 2, this.canvas.height - 60);

          // Load fruit images
          this.fruitTypes.forEach(fruit => {
              const img = new Image();
              img.src = `https://cdn.shopify.com/s/files/1/0860/2877/9835/files/${fruit}.png?v=1725172565`;
              this.fruitImages[fruit] = img;
          });

          console.log('Game initialized');
      },

      Bunny: class {
          constructor(x, y) {
              this.x = x;
              this.y = y;
              this.width = 50;  // Adjust as needed
              this.height = 50; // Adjust as needed
              this.currentImageIndex = 0;
              this.frameCount = 0;
          }

          draw(ctx) {
              if (this.frameCount % 10 === 0) {  // Change image every 10 frames
                  this.currentImageIndex = (this.currentImageIndex + 1) % FruitGame.bunnyImages.length;
              }
              const img = FruitGame.bunnyImages[this.currentImageIndex];
              ctx.drawImage(img, this.x, this.y, this.width, this.height);
              this.frameCount++;
          }
      },

      drawPoo: function(x, y) {
          const pooSize = Math.max(10, this.bunny.width / 8); // Start smaller and grow with the bunny
          this.ctx.fillStyle = '#8B4513';
          this.ctx.beginPath();
          this.ctx.arc(x, y, pooSize, 0, Math.PI * 2);
          this.ctx.fill();
      },

      createItem: function() {
          const randomFruit = this.fruitTypes[Math.floor(Math.random() * this.fruitTypes.length)];
          return {
              x: Math.random() * (this.canvas.width - 80) + 40,
              y: -80,
              type: randomFruit,
              speed: 1 + Math.random() * (1 + this.level * 0.2) // Gradually increase speed
          };
      },

      drawFruit: function(x, y, type) {
          const img = this.fruitImages[type];
          if (img.complete) {
              this.ctx.drawImage(img, x - 20, y - 20, 40, 40);
          } else {
              // If image is not loaded, draw a placeholder circle
              this.ctx.fillStyle = '#FF0000';
              this.ctx.beginPath();
              this.ctx.arc(x, y, 20, 0, Math.PI * 2);
              this.ctx.fill();
          }
      },

      updateGame: function() {
          if (!this.gameActive) return;

          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

          this.ctx.fillStyle = this.backgroundColor;
          this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
          
          this.ctx.strokeStyle = this.borderColor;
          this.ctx.lineWidth = 10;
          this.ctx.strokeRect(5, 5, this.canvas.width - 10, this.canvas.height - 10);

          this.bunny.draw(this.ctx);

          for (let i = this.poos.length - 1; i >= 0; i--) {
              const poo = this.poos[i];
              poo.y -= 8;
              this.drawPoo(poo.x, poo.y);

              if (poo.y < 0) {
                  this.poos.splice(i, 1);
              }
          }

          for (let i = this.items.length - 1; i >= 0; i--) {
              const item = this.items[i];
              item.y += item.speed;

              this.drawFruit(item.x, item.y, item.type);

              // Collision detection with bunny
              if (Math.abs(item.x - this.bunny.x - this.bunny.width/2) < 30 && 
                  Math.abs(item.y - this.bunny.y - this.bunny.height/2) < 30) {
                  this.score += (item.type === 'durian') ? 5 : 1; // Durian worth more points
                  this.scoreElement.textContent = `SCORE: ${this.score}`;
                  this.items.splice(i, 1);
                  continue;
              }

              // Collision detection with poos
              for (let j = this.poos.length - 1; j >= 0; j--) {
                  const poo = this.poos[j];
                  if (Math.abs(item.x - poo.x) < 30 && Math.abs(item.y - poo.y) < 30) {
                      this.score += (item.type === 'durian') ? 5 : 1;
                      this.scoreElement.textContent = `SCORE: ${this.score}`;
                      this.items.splice(i, 1);
                      this.poos.splice(j, 1);
                      break;
                  }
              }

              // Remove item if it goes off screen
              if (item.y > this.canvas.height) {
                  this.items.splice(i, 1);
                  this.lives--;
                  this.updateLives();
                  if (this.lives <= 0) {
                      this.gameOver();
                      return;
                  }
              }
          }

          if (Math.random() < 0.01 + (this.level * 0.002)) {
              if (this.level % 20 === 0 && !this.isBossLevel) {
                  this.isBossLevel = true;
                  for (let i = 0; i < 10; i++) {
                      this.items.push({
                          x: Math.random() * (this.canvas.width - 80) + 40,
                          y: -80 - i * 100,
                          type: 'carrot',
                          speed: 2 + Math.random() * 3
                      });
                  }
              } else if (this.level % 10 === 0 && Math.random() < 0.1) {
                  this.items.push({
                      x: Math.random() * (this.canvas.width - 80) + 40,
                      y: -80,
                      type: 'spareLife',
                      speed: 1 + Math.random() * 2
                  });
              } else if (!this.isBossLevel) {
                  this.items.push(this.createItem());
              }
          }

          // Check for fruit collection
          if (this.score >= this.level * 10) { // Change level every 10 fruits
              this.level++;
              this.levelElement.textContent = `LEVEL ${this.level}`;
              // Increase difficulty here (e.g., increase speed or spawn rate)
          }

          // Adjust the growth of the bunny to be more gradual
          if (this.score > 0 && this.score % 10 === 0) { // Check if score is a multiple of 10
              if (this.level % 3 === 0) {
                  if (this.bunny.width < 60) { // Set a maximum width
                      this.bunny.width += 1; // Smaller growth increment
                      this.bunny.height += 1; // Smaller growth increment
                  }
                  this.cursorSize++; // Add an extra poop
              }
          }

          requestAnimationFrame(() => this.updateGame());
      },

      updateLives: function() {
          this.livesElement.textContent = `LIVES: ${this.lives}`;
      },

      gameOver: function() {
          this.gameActive = false;
          const endTime = new Date();
          const timeTaken = (endTime - this.startTime) / 1000;

          this.gameOverElement.style.display = 'block';
          this.finalScoreElement.textContent = this.score;

          // Display game statistics with fruit images
          const statsHtml = `
              <p>Time: ${timeTaken.toFixed(2)} seconds</p>
              <p>Poops Fired: ${this.poopsFired}</p>
              <p>Fruit Collected:</p>
              <ul style="list-style-type: none; padding: 0;">
                  ${Object.entries(this.fruitCollected).map(([fruit, count]) => `
                      <li style="display: flex; align-items: center; margin-bottom: 5px;">
                          <img src="${this.fruitImages[fruit].src}" alt="${fruit}" style="width: 20px; height: 20px; margin-right: 5px;">
                          ${fruit}: ${count}
                      </li>
                  `).join('')}
              </ul>
              <p>Extra Lives Collected: ${this.extraLivesCollected}</p>
          `;
          this.gameStatsElement.innerHTML = statsHtml;

          const highScore = localStorage.getItem('fruitGameHighScore') || 0;
          if (this.score > highScore) {
              localStorage.setItem('fruitGameHighScore', this.score);
              this.showReward();
          }

          this.showRandomProduct();
          this.updateLeaderboard(this.score);
          this.fruitCollected = 0; // Reset fruit collected
          this.showVoucher(); // Show voucher at the end of the game
      },

      updateLeaderboard: function(score, playerName = 'Anonymous') {
          let leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
          leaderboard.push({name: playerName, score: score});
          leaderboard.sort((a, b) => b.score - a.score);
          leaderboard = leaderboard.slice(0, 10); // Keep only top 10
          localStorage.setItem('fruitGameLeaderboard', JSON.stringify(leaderboard));

          this.leaderboardListElement.innerHTML = leaderboard.map((entry, index) => 
              `<li>${index + 1}. ${entry.name}: ${entry.score}</li>`
          ).join('');

          this.leaderboardElement.style.display = 'block';
          this.gameOverElement.style.display = 'none'; // Hide game over screen
      },

      submitHighScore: function() {
          const playerName = document.getElementById('playerName').value;
          console.log(`Submitting score: ${this.score} for player: ${playerName}`);

          this.updateLeaderboard(this.score, playerName);

          // Display message after submitting score
          alert("Thanks for playing! Your score has been submitted.");
      },

      showReward: function() {
          this.rewardElement.style.display = 'block';
          const discountCode = 'FRUIT25OFF'; // This should be generated or retrieved from your backend
          this.discountCodeElement.textContent = discountCode;
          
          // Add text to explain the voucher
          const voucherExplanation = document.createElement('p');
          voucherExplanation.textContent = "Congratulations! You've earned a 25% discount on your next purchase.";
          this.rewardElement.insertBefore(voucherExplanation, this.discountCodeElement);
      },

      showRandomProduct: function() {
          console.log('Showing random product');
          
          // Fetch random product from the shop
          fetch('/products.json')
              .then(response => response.json())
              .then(data => {
                  const products = data.products;
                  const randomProduct = products[Math.floor(Math.random() * products.length)];
                  
                  this.productDetailsElement.innerHTML = `
                      <div class="product-recommendation">
                          <img src="${randomProduct.images[0].src}" alt="${randomProduct.title}" style="width:200px;height:200px;object-fit:cover;">
                          <div class="product-info">
                              <h4>${randomProduct.title}</h4>
                              <p>Price: $${randomProduct.variants[0].price}</p>
                          </div>
                          <button class="add-to-cart-button" onclick="FruitGame.addToCart(${randomProduct.variants[0].id})">Add to Cart</button>
                      </div>
                  `;
                  this.productRecommendationElement.style.display = 'block';
              })
              .catch(error => {
                  console.error('Error fetching random product:', error);
                  this.productRecommendationElement.style.display = 'none';
              });
      },

      addToCart: function(variantId) {
          console.log(`Adding product with variant ID ${variantId} to cart`);
          
          fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                  items: [{
                      id: variantId,
                      quantity: 1
                  }]
              })
          })
          .then(response => response.json())
          .then(data => {
              console.log('Product added to cart:', data);
              alert('Product added to cart!');
          })
          .catch((error) => {
              console.error('Error:', error);
              alert('Error adding product to cart');
          });
      },

      startGame: function() {
          console.log('Starting game loop');
          this.gameActive = true;
          this.score = 0;
          this.level = 1;
          this.lives = 3;
          this.items = [];
          this.poos = [];
          this.cursorSize = 40;
          this.backgroundColor = '#FFFFFF';
          this.startTime = new Date();
          this.poopsFired = 0;
          this.fruitCollected = {
              'tomato': 0, 'pineapple': 0, 'watermelon': 0, 'durian': 0, 'raspberry': 0, 
              'orange': 0, 'apple': 0, 'pear': 0, 'banana': 0, 'carrot': 0, 'grapes': 0, 'strawberry': 0
          };
          this.extraLivesCollected = 0;
          
          this.scoreElement.textContent = `SCORE: ${this.score}`;
          this.levelElement.textContent = `LEVEL ${this.level}`;
          this.updateLives();
          
          this.gameOverElement.style.display = 'none';
          this.leaderboardElement.style.display = 'none';
          this.rewardElement.style.display = 'none';
          this.productRecommendationElement.style.display = 'none';
          this.gameInstructions.style.display = 'none';
          
          this.updateGame();
      },

      shootPoo: function() {
          this.poos.push({ x: this.bunny.x + this.bunny.width / 2, y: this.bunny.y });
          this.poopsFired++;
      },

      showVoucher: function() {
          this.voucherElement.style.display = 'block'; // Show the voucher
      }
  };

  window.onload = function() {
      console.log('Window loaded, initializing game');
      FruitGame.init();
  };

  console.log('Game script loaded');
</script>

<style>
  .fruit-game-container * {
      font-family: Arial, sans-serif !important;
      box-sizing: border-box;
  }

  .fruit-game-container {
      text-align: center;
      max-width: 800px;
      width: 100%;
      margin: 0 auto;
      background-color: #FFFFFF !important;
      padding: 20px;
      border: 4px solid #494949 !important;
      border-radius: 10px;
      overflow: hidden;
  }

  .fruit-game-container #gameCanvas {
      border: 4px solid #494949 !important;
      margin: 20px auto;
      display: block;
      max-width: 100%;
      height: auto;
  }

  .fruit-game-container #gameInfo {
      display: flex;
      justify-content: space-between;
      font-size: 16px;
      margin: 10px 0;
      color: #18533A !important;
  }

  .fruit-game-container #gameOver,
  .fruit-game-container #leaderboard,
  .fruit-game-container #reward,
  .fruit-game-container #productRecommendation {
      margin-top: 20px;
      background-color: #F0F0F0 !important;
      color: #18533A !important;
      padding: 10px;
      border-radius: 5px;
  }

  .fruit-game-container #leaderboardForm input,
  .fruit-game-container #leaderboardForm button {
      margin: 10px 0;
      padding: 5px;
      font-size: 16px;
  }

  .fruit-game-container #leaderboardList {
      list-style-position: inside;
      padding: 0;
      text-align: left;
  }

  .fruit-game-container #reward {
      font-size: 18px;
      background-color: #E0FFE0 !important;
  }

  .reward-popup {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #FFFFFF;
      color: #18533A;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.5);
      z-index: 1000;
      font-family: Arial, sans-serif;
      text-align: center;
  }

  .reward-popup .discount-code {
      font-size: 24px;
      font-weight: bold;
      color: #FF0000;
  }

  @media (max-width: 820px) {
      .fruit-game-container {
          padding: 10px;
      }

      .fruit-game-container #gameInfo {
          font-size: 14px;
      }
  }

  .product-recommendation {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 20px;
      text-align: center;
  }

  .product-recommendation img {
      margin-bottom: 15px;
  }

  .product-info {
      margin-bottom: 15px;
  }

  .add-to-cart-button {
      background-color: #4CAF50;
      border: none;
      color: white;
      padding: 15px 32px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      margin: 4px 2px;
      cursor: pointer;
      transition-duration: 0.4s;
  }

  .add-to-cart-button:hover {
      background-color: #45a049;
  }

  @media (max-width: 768px) {
      .fruit-game-container {
          padding: 15px; // Adjust padding for mobile
      }
  }
</style>

{% schema %}
{
  "name": "Fruit Shooting Game",
  "settings": [],
  "presets": [
    {
      "name": "Fruit Shooting Game",
      "category": "Interactive"
    }
  ]
}
{% endschema %}