<div class="fruit-game-container">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="gameInfo">
    <div id="score">Score: 0</div>
    <div id="level">Level: 1</div>
    <div id="lives">Lives: ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è</div>
  </div>
  <div id="gameOver" style="display: none;">
    <h2>Game Over</h2>
    <p>Your score: <span id="finalScore"></span></p>
    <form id="leaderboardForm">
      <input type="text" id="playerName" placeholder="Enter your name" required>
      <button type="submit">Submit Score</button>
    </form>
  </div>
  <div id="leaderboard" style="display: none;">
    <h2>Leaderboard</h2>
    <ol id="leaderboardList"></ol>
  </div>
  <div id="reward" style="display: none;">
    Congratulations! You've earned a 10% discount. Use code: <span id="discountCode"></span>
  </div>
</div>

<script>
  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');
  const scoreElement = document.getElementById('score');
  const levelElement = document.getElementById('level');
  const livesElement = document.getElementById('lives');
  const gameOverElement = document.getElementById('gameOver');
  const finalScoreElement = document.getElementById('finalScore');
  const leaderboardElement = document.getElementById('leaderboard');
  const leaderboardListElement = document.getElementById('leaderboardList');
  const rewardElement = document.getElementById('reward');
  const discountCodeElement = document.getElementById('discountCode');

  let score = 0;
  let level = 1;
  let lives = 3;
  let fruits = [];
  let cursorX = 0;
  let cursorY = 0;
  let gameActive = true;

  const fruitTypes = ['üçé', 'üçå', 'üçá', 'üçä', 'üçì'];

  function createFruit() {
    return {
      x: Math.random() * canvas.width,
      y: 0,
      type: fruitTypes[Math.floor(Math.random() * fruitTypes.length)],
      speed: 2 + Math.random() * 3 + (level - 1)
    };
  }

  function updateGame() {
    if (!gameActive) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw cursor
    ctx.fillStyle = 'blue';
    ctx.beginPath();
    ctx.arc(cursorX, cursorY, 20, 0, Math.PI * 2);
    ctx.fill();

    // Update and draw fruits
    for (let i = fruits.length - 1; i >= 0; i--) {
      const fruit = fruits[i];
      fruit.y += fruit.speed;

      ctx.font = '30px Arial';
      ctx.fillText(fruit.type, fruit.x, fruit.y);

      // Check collision with cursor
      if (Math.abs(fruit.x - cursorX) < 30 && Math.abs(fruit.y - cursorY) < 30) {
        score++;
        scoreElement.textContent = `Score: ${score}`;
        fruits.splice(i, 1);
        if (score % 10 === 0) {
          level++;
          levelElement.textContent = `Level: ${level}`;
        }
      }

      // Remove fruits that fall off screen
      if (fruit.y > canvas.height) {
        fruits.splice(i, 1);
        lives--;
        updateLives();
        if (lives <= 0) {
          gameOver();
          return;
        }
      }
    }

    // Add new fruits
    if (Math.random() < 0.02 + (level * 0.005)) {
      fruits.push(createFruit());
    }

    requestAnimationFrame(updateGame);
  }

  function updateLives() {
    livesElement.textContent = `Lives: ${'‚ù§Ô∏è'.repeat(lives)}`;
  }

  function gameOver() {
    gameActive = false;
    gameOverElement.style.display = 'block';
    finalScoreElement.textContent = score;
  }

  function showReward() {
    const discountCode = generateDiscountCode();
    discountCodeElement.textContent = discountCode;
    rewardElement.style.display = 'block';
    // Here you would typically send this code to your server to activate it
  }

  function generateDiscountCode() {
    return 'FRUIT' + Math.random().toString(36).substr(2, 5).toUpperCase();
  }

  canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    cursorX = e.clientX - rect.left;
    cursorY = e.clientY - rect.top;
  });

  document.getElementById('leaderboardForm').addEventListener('submit', (e) => {
    e.preventDefault();
    const playerName = document.getElementById('playerName').value;
    submitScore(playerName, score);
    showLeaderboard();
  });

  function submitScore(name, score) {
    // In a real implementation, you'd send this data to your server
    // For now, we'll just store it in localStorage
    const leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
    leaderboard.push({ name, score });
    leaderboard.sort((a, b) => b.score - a.score);
    localStorage.setItem('fruitGameLeaderboard', JSON.stringify(leaderboard.slice(0, 10)));
  }

  function showLeaderboard() {
    const leaderboard = JSON.parse(localStorage.getItem('fruitGameLeaderboard') || '[]');
    leaderboardListElement.innerHTML = leaderboard.map(entry => 
      `<li>${entry.name}: ${entry.score}</li>`
    ).join('');
    leaderboardElement.style.display = 'block';
  }

  updateGame();
</script>

<style>
  .fruit-game-container {
    text-align: center;
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
  }
  #gameCanvas {
    border: 1px solid black;
    margin: 20px auto;
    display: block;
  }
  #gameInfo {
    display: flex;
    justify-content: space-between;
    font-size: 20px;
    margin: 10px 0;
  }
  #gameOver, #leaderboard, #reward {
    margin-top: 20px;
  }
  #leaderboardForm input, #leaderboardForm button {
    margin: 10px 0;
    padding: 5px;
    font-size: 16px;
  }
  #leaderboardList {
    list-style-position: inside;
    padding: 0;
  }
  #reward {
    font-size: 18px;
    color: green;
  }
</style>

{% schema %}
{
  "name": "Fruit Catching Game",
  "settings": [],
  "presets": [
    {
      "name": "Fruit Catching Game",
      "category": "Interactive"
    }
  ]
}
{% endschema %}