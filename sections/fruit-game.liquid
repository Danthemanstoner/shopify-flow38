<div class="mario-game-container">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="gameInfo">
    <div id="score">SCORE: 0</div>
    <div id="level">WORLD 1-1</div>
    <div id="lives">MARIO x 3</div>
  </div>
  <div id="gameOver" style="display: none;">
    <h2>GAME OVER</h2>
    <p>YOUR SCORE: <span id="finalScore"></span></p>
    <form id="leaderboardForm">
      <input type="text" id="playerName" placeholder="Enter your name" required>
      <button type="submit">Submit Score</button>
    </form>
  </div>
  <div id="leaderboard" style="display: none;">
    <h2>HIGH SCORES</h2>
    <ol id="leaderboardList"></ol>
  </div>
  <div id="reward" style="display: none;">
    YOU GOT A POWER-UP! 10% OFF CODE: <span id="discountCode"></span>
  </div>
</div>

<script>
  console.log('Game script starting');

  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');
  const scoreElement = document.getElementById('score');
  const levelElement = document.getElementById('level');
  const livesElement = document.getElementById('lives');
  const gameOverElement = document.getElementById('gameOver');
  const finalScoreElement = document.getElementById('finalScore');
  const leaderboardElement = document.getElementById('leaderboard');
  const leaderboardListElement = document.getElementById('leaderboardList');
  const rewardElement = document.getElementById('reward');
  const discountCodeElement = document.getElementById('discountCode');

  let score = 0;
  let level = 1;
  let lives = 3;
  let items = [];
  let marioX = 400;
  let marioY = 500;
  let gameActive = true;

  const itemTypes = ['🍄', '🌟', '🍁', '🪙'];

  function createItem() {
    return {
      x: Math.random() * canvas.width,
      y: 0,
      type: itemTypes[Math.floor(Math.random() * itemTypes.length)],
      speed: 2 + Math.random() * 3 + (level - 1)
    };
  }

  function updateGame() {
    console.log('Update game called');
    if (!gameActive) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw background
    ctx.fillStyle = '#5C94FC';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw Mario
    ctx.fillStyle = 'red';
    ctx.fillRect(marioX - 20, marioY - 40, 40, 40);

    // Update and draw items
    for (let i = items.length - 1; i >= 0; i--) {
      const item = items[i];
      item.y += item.speed;

      ctx.font = '30px Arial';
      ctx.fillText(item.type, item.x, item.y);

      // Check collision with Mario
      if (Math.abs(item.x - marioX) < 30 && Math.abs(item.y - marioY) < 30) {
        score++;
        scoreElement.textContent = `SCORE: ${score}`;
        items.splice(i, 1);
        if (score % 10 === 0) {
          level++;
          levelElement.textContent = `WORLD 1-${level}`;
        }
      }

      // Remove items that fall off screen
      if (item.y > canvas.height) {
        items.splice(i, 1);
        lives--;
        updateLives();
        if (lives <= 0) {
          gameOver();
          return;
        }
      }
    }

    // Add new items
    if (Math.random() < 0.02 + (level * 0.005)) {
      items.push(createItem());
    }

    requestAnimationFrame(updateGame);
  }

  function updateLives() {
    livesElement.textContent = `MARIO x ${lives}`;
  }

  function gameOver() {
    gameActive = false;
    gameOverElement.style.display = 'block';
    finalScoreElement.textContent = score;
  }

  function showReward() {
    const discountCode = generateDiscountCode();
    discountCodeElement.textContent = discountCode;
    rewardElement.style.display = 'block';
  }

  function generateDiscountCode() {
    return 'MARIO' + Math.random().toString(36).substr(2, 5).toUpperCase();
  }

  canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    marioX = e.clientX - rect.left;
  });

  document.getElementById('leaderboardForm').addEventListener('submit', (e) => {
    e.preventDefault();
    const playerName = document.getElementById('playerName').value;
    submitScore(playerName, score);
    showLeaderboard();
  });

  function submitScore(name, score) {
    const leaderboard = JSON.parse(localStorage.getItem('marioGameLeaderboard') || '[]');
    leaderboard.push({ name, score });
    leaderboard.sort((a, b) => b.score - a.score);
    localStorage.setItem('marioGameLeaderboard', JSON.stringify(leaderboard.slice(0, 10)));
  }

  function showLeaderboard() {
    const leaderboard = JSON.parse(localStorage.getItem('marioGameLeaderboard') || '[]');
    leaderboardListElement.innerHTML = leaderboard.map(entry => 
      `<li>${entry.name}: ${entry.score}</li>`
    ).join('');
    leaderboardElement.style.display = 'block';
  }

  console.log('Starting game loop');
  updateGame();
</script>

<style>
  /* Add this line to ensure styles are scoped to the game container */
  .mario-game-container * {
    font-family: 'Press Start 2P', cursive !important;
  }

  .mario-game-container {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
    background-color: #5C94FC !important;
    padding: 20px;
    border: 4px solid #F83800 !important;
    border-radius: 10px;
  }
  .mario-game-container #gameCanvas {
    border: 4px solid #F83800 !important;
    margin: 20px auto;
    display: block;
  }
  .mario-game-container #gameInfo {
    display: flex;
    justify-content: space-between;
    font-size: 16px;
    margin: 10px 0;
    color: #FFFFFF !important;
  }
  .mario-game-container #gameOver,
  .mario-game-container #leaderboard,
  .mario-game-container #reward {
    margin-top: 20px;
    background-color: #F83800 !important;
    color: #FFFFFF !important;
    padding: 10px;
    border-radius: 5px;
  }
  .mario-game-container #leaderboardForm input,
  .mario-game-container #leaderboardForm button {
    margin: 10px 0;
    padding: 5px;
    font-size: 16px;
  }
  .mario-game-container #leaderboardList {
    list-style-position: inside;
    padding: 0;
    text-align: left;
  }
  .mario-game-container #reward {
    font-size: 18px;
    background-color: #00B800 !important;
  }
</style>

{% schema %}
{
  "name": "Mario-style Game",
  "settings": [],
  "presets": [
    {
      "name": "Mario-style Game",
      "category": "Interactive"
    }
  ]
}
{% endschema %}