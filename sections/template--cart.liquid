<!-- /templates/cart.liquid -->
{% comment %}
  For info on test orders:
    - General http://docs.shopify.com/manual/your-store/orders/test-orders
    - Shopify Payments - http://docs.shopify.com/manual/more/shopify-payments/testing-shopify-payments
{% endcomment %}

<div class="wrapper-padded main-page-container">

  {% assign subtotal_compare_at_price = 0 %}

  {% if cart.item_count > 0 %}
    <div class="sitewide--title-wrapper">
      <h1 class="page--title">{{ 'cart.general.title' | t }}</h1>
    </div>

    <!-- Delivery Date and Time Picker -->
    <div class="delivery-date-time-picker">
      <h2>Schedule Your Delivery</h2>

      <!-- Delivery Date Picker -->
      <div class="picker-group">
        <label for="delivery-date-picker-input">Select Delivery Date:</label>
        <input type="text" id="delivery-date-picker-input" placeholder="Select a date" readonly>
      </div>

      <!-- Delivery Time Picker -->
      <div class="picker-group">
        <label for="delivery-time-picker">Select Delivery Time:</label>
        <select id="delivery-time-picker">
          <option value="" disabled selected>Select a time</option>
          <option value="08:00 AM - 10:00 AM">08:00 AM - 10:00 AM</option>
          <option value="10:00 AM - 12:00 PM">10:00 AM - 12:00 PM</option>
          <option value="12:00 PM - 02:00 PM">12:00 PM - 02:00 PM</option>
          <option value="02:00 PM - 04:00 PM">02:00 PM - 04:00 PM</option>
          <option value="04:00 PM - 06:00 PM">04:00 PM - 06:00 PM</option>
        </select>
      </div>

      <button id="confirm-delivery-details" class="btn btn-primary">Confirm Delivery Details</button>

      <!-- Display Selected Date and Time -->
      <p id="delivery-info" class="delivery-info"></p>
    </div>

    <form action="{{ routes.cart_url }}" method="post" novalidate class="cart table-wrap" data-wetheme-section-type="template--cart" data-wetheme-section-id="template--cart">
      <table class="cart-table full table--responsive">
        <thead class="cart__row cart__header-labels">
          <th scope="row" colspan="2" class="text-center"></th>
          <th scope="row" class="text-center">{{ 'cart.label.price' | t }}</th>
          <th scope="row" class="text-center">{{ 'cart.label.quantity' | t }}</th>
          <th scope="row" class="text-center">{{ 'cart.label.total' | t }}</th>
        </thead>
        <tbody>
          {% for item in cart.items %}
            <tr class="cart__row table__section">
              <td data-label="{{ 'customer.order.product' | t }}">
                <a href="{{ item.url | within: collections.all }}" class="cart__image">
                  {% capture cart_page_product_image_alt %}{{ item.image.alt | default: item.title | escape }}{% endcapture %}
                  {% render 'responsive-image' with item.image, alt: cart_page_product_image_alt, blur: false %}
                </a>
              </td>
              <td class="cart__row--product-details">
                <a class="cart__row--title" href="{{ item.url }}">{{ item.product.title }}</a>
                {% unless item.variant.title contains 'Default' %}
                  <div class="cart__meta-text">
                    {% for option in item.product.options %}
                      {{ option }}: {{ item.variant.options[forloop.index0] }}<br/>
                    {% endfor %}
                  </div>
                {% endunless %}
                {% if item.selling_plan_allocation %}
                  <div class="cart__meta-text">
                    <span>{{ item.selling_plan_allocation.selling_plan.name }}</span>
                  </div>
                {% endif %}
                {% if settings.cart_vendor_enable %}
                  <p>{{ item.vendor }}</p>
                {% endif %}
                {% assign property_size = item.properties | size %}
                {% if property_size > 0 %}
                  {% for p in item.properties %}
                    {% if p.last != blank and p.first.first != '_' %}
                      <div class="cart__row--property">
                        {{ p.first }}:
                        {% if p.last contains '/uploads/' %}
                          <a href="{{ p.last }}">{{ p.last | split: '/' | last }}</a>
                        {% else %}
                          {{ p.last }}
                        {% endif %}
                      </div>
                    {% endif %}
                  {% endfor %}
                {% endif %}
                <span class="text-link-animated">
                  <a href="{{ routes.cart_url }}/change?line={{ forloop.index }}&amp;quantity=0" class="cart__remove">
                    <small>{{ 'cart.general.remove' | t }}</small>
                  </a>
                </span>
              </td>
              <td class="text-center" data-label="{{ 'cart.label.price' | t }}">
                {%- if item.product.compare_at_price > item.price -%}
                  <span class="price-line-through sale-price">
                    <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
                    {{- item.product.compare_at_price | money -}}
                  </span>
                  <span class="money item-price">{{ item.price | money }}</span>
                {% else %}
                  <span class="money">{{ item.price | money }}</span>
                {% endif %}
              </td>
              <td class="text-center" data-label="{{ 'cart.label.quantity' | t }}">
                <div class="js-qty-wrapper">
                  <div class="js-qty">
                    <button type="button" aria-label="{{ 'general.accessibility.quantity.decrease_quantity' | t }}" class="js js-qty__adjust js-qty__adjust--minus icon-fallback-text standalone-icon--wrapper" data-id="" data-qty="0">
                      {% render 'theme-icon' with icon: 'minus', iconClasses: 'flex-full', iconAttributes: 'aria-hidden="true"' %}
                      <span class="fallback-text">âˆ’</span>
                    </button>
                    <input type="text" class="js-qty__num" value="{{ item.quantity }}" min="1" data-id="" aria-label="quantity" pattern="[0-9]*" name="updates[]" id="updates_{{ item.id }}">
                    <button type="button" aria-label="{{ 'general.accessibility.quantity.increase_quantity' | t }}" class="js js-qty__adjust js-qty__adjust--plus icon-fallback-text standalone-icon--wrapper" data-id="" data-qty="11">
                      {% render 'theme-icon' with icon: 'plus', iconClasses: 'flex-full', iconAttributes: 'aria-hidden="true"' %}
                      <span class="fallback-text">+</span>
                    </button>
                  </div>
                </div>
              </td>
              <td class="text-center cart-total-label" data-label="{{ 'cart.label.total' | t }}">
                {% assign original_line_price = item.original_line_price %}
                {% if item.product.compare_at_price > item.price %}
                  {% assign original_line_price = item.variant.compare_at_price | times: item.quantity %}
                {% endif %}
                {% assign subtotal_compare_at_price = subtotal_compare_at_price | plus: original_line_price %}
                {%- if original_line_price != item.final_line_price and item.line_level_discount_allocations != blank -%}
                  <span class="hidden">{{ 'products.general.regular_price' | t }}</span>
                  <span class="cart-total-label__discount">
                    <span class="discount--sale-color discount--line-through">{{ original_line_price | money }}</span>
                  </span>
                  <span class="hidden">{{ 'products.general.sale_price' | t }}</span>
                  <span class="cart-total-label__discount">
                    <span class="money">{{ item.final_line_price | money }}</span>
                  </span>
                {% else %}
                  <span class="money">{{ item.final_line_price | money }}</span>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
      <div class="grid cart__row">
        {% if settings.cart_notes_enable %}
          <div class="grid__item two-thirds medium--one-whole small--one-whole">
            <label for="CartSpecialInstructions" class="label-font">{{ 'cart.general.note' | t }}</label>
            <textarea name="note" class="input-full" id="CartSpecialInstructions">{{ cart.note }}</textarea>
          </div>
        {% endif %}
        {% if settings.giftwrap_gift_note %}
          <div class="grid__item two-thirds medium--one-whole small--one-whole">
            <label for="CartGiftNote" class="label-font">{{ 'products.general.giftwrap_note' | t }}</label>
            <textarea id="CartGiftNote" class="input-full" placeholder="{{ 'products.general.giftwrap_note_placeholder' | t }}" name="attributes[gift_note]">{{ cart.attributes.gift_note }}</textarea>
          </div>
        {% endif %}
        <div class="grid__item text-right{% if settings.cart_notes_enable %} one-third medium--one-whole small--one-whole{% endif %}">
          {%- if cart.cart_level_discount_applications != blank -%}
            <div class="cart--order-discount-wrapper custom-font discount--sale-color">
              {%- for discount_application in cart.cart_level_discount_applications -%}
              <p>
                <span class="cart__subtotal-title"><span class="hidden">{{ 'customer.order.discount' | t }}:</span>{{- discount_application.title -}}</span>
                <span class="h3 cart__subtotal"><span class="money">-{{ discount_application.total_allocated_amount | money }}</span></span>
              </p>
              {%- endfor -%}
            </div>
          {%- endif -%}

          {% if subtotal_compare_at_price != cart.total_price %}
            <span class="cart__subtotal">
              <del><span class="money">{{ subtotal_compare_at_price | money }}</span></del>
            </span>
          {% endif %}
          <p>
            <span class="cart__subtotal-title">{{ 'cart.general.subtotal' | t }}</span>
            <span class="h3 cart__subtotal"><span class="money">{{ cart.total_price | money }}</span></span>
          </p>

          {%- capture taxes_shipping_checkout -%}
            {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
              {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
            {%- elsif cart.taxes_included -%}
              {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
            {%- elsif shop.shipping_policy.body != blank -%}
              {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
            {%- else -%}
              {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
            {%- endif -%}
          {%- endcapture -%}

          <div class="cart__shipping rte text-link-animated"><em>{{ taxes_shipping_checkout }}</em></div>

          <div class="btn-wrapper-default">
            <input type="submit" name="update" class="btn btn--secondary update-cart cart--button-update btn--secondary" aria-label="{{ 'cart.general.update' | t }}" value="{{ 'cart.general.update' | t }}">
            <button type="submit" name="checkout" aria-label="{{ 'cart.general.checkout' | t }}" class="btn cart--button-checkout">{{ 'cart.general.checkout' | t }}</button>
          </div>

          {% if additional_checkout_buttons and settings.enable-additional-checkout-buttons %}
          <div class="additional-checkout-buttons additional-checkout-buttons--vertical">
              {{ content_for_additional_checkout_buttons }}
          </div>
          {% endif %}
        </div>
      </div>
    </form>

  {% else %}
    <div class="sitewide--title-wrapper">
      <h1 class="page--title">{{ 'cart.general.title' | t }}</h1>
    </div>
    <div class="cart--empty-cart">
      <p>{{ 'cart.general.empty' | t }}</p>
      <a href="{{ routes.all_products_collection_url }}" class="btn">{{ 'general.continue_shopping' | t }}</a>
    </div>

  {% endif %}

</div>

{% schema %}
{
  "name": "t:sections.template--cart.name"
}
{% endschema %}

<!-- Styles for the Delivery Date and Time Picker -->
<style>
  .delivery-date-time-picker {
    margin-top: 20px;
    text-align: center;
    background-color: #f9f9f9;
    padding: 20px;
    border-radius: 10px;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .delivery-date-time-picker h2 {
    font-size: 1.8em;
    margin-bottom: 20px;
  }

  .picker-group {
    margin-bottom: 15px;
    text-align: left;
  }

  .picker-group label {
    font-size: 1.2em;
    display: block;
    margin-bottom: 5px;
  }

  #delivery-date-picker-input, #delivery-time-picker {
    width: 100%;
    padding: 10px;
    font-size: 1.1em;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  #delivery-time-picker {
    appearance: none;
    background-color: white;
    cursor: pointer;
  }

  .delivery-info {
    margin-top: 10px;
    color: #28a745;
    font-weight: bold;
  }
</style>

<!-- JavaScript for the Date and Time Picker Functionality -->
<script src="https://cdn.shopify.com/s/files/1/0860/2877/9835/files/pikaday.js?v=1725772108" defer></script>
<link rel="stylesheet" href="https://cdn.shopify.com/s/files/1/0860/2877/9835/files/pikaday.css?v=1725772108">

<script>
document.addEventListener('DOMContentLoaded', function() {
  const datePickerInput = document.getElementById('delivery-date-picker-input');
  const timePickerInput = document.getElementById('delivery-time-picker');
  const confirmButton = document.getElementById('confirm-delivery-details');
  const deliveryInfo = document.getElementById('delivery-info');

  let selectedDate = null;
  let selectedTime = null;

  // Initialize Pikaday date picker
  if (datePickerInput) {
    new Pikaday({
      field: datePickerInput,
      format: 'YYYY-MM-DD',
      minDate: new Date(), // Disable past dates
      onSelect: function(date) {
        selectedDate = date;
        updateDeliveryInfo();
      }
    });
  }

  // Time Picker selection
  if (timePickerInput) {
    timePickerInput.addEventListener('change', function() {
      selectedTime = this.value;
      updateDeliveryInfo();
    });
  }

  // Update delivery info in the cart
  function updateDeliveryInfo() {
    if (selectedDate && selectedTime) {
      const formattedDate = selectedDate.toDateString();
      deliveryInfo.textContent = `Delivery on ${formattedDate} at ${selectedTime}`;

      // Handle the cart attribute updates
      confirmButton.addEventListener('click', function() {
        fetch('/cart.js')
          .then(response => response.json())
          .then(cart => {
            return fetch('/cart/update.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                attributes: {
                  'Delivery Date': formattedDate,
                  'Delivery Time': selectedTime
                }
              })
            });
          })
          .then(response => {
            if (response.ok) {
              alert('Delivery details successfully updated!');
            } else {
              alert('Failed to update delivery details. Please try again.');
            }
          })
          .catch(error => {
            console.error('Error updating delivery details:', error);
            alert('Failed to update delivery details. Please try again.');
          });
      });
    }
  }
});
</script>

